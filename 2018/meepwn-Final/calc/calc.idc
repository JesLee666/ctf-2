//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-BEBD-7E64-C8                      |
// |      Jialin Hu, Tencent Technology Headquarter(Shenzhen) Co., Ltd       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_x86");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	;
	add_segm_ex(0X8048000,0X80485D4,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8048000,"LOAD");
	SegClass (0X8048000,"CODE");
	SegDefReg(0x8048000,"es",0x0);
	SegDefReg(0x8048000,"ss",0x0);
	SegDefReg(0x8048000,"ds",0x10);
	SegDefReg(0x8048000,"fs",0x0);
	SegDefReg(0x8048000,"gs",0x0);
	set_segm_type(0X8048000,2);
	add_segm_ex(0X80485D4,0X80485F7,0X4,1,5,2,ADDSEG_NOSREG);
	SegRename(0X80485D4,".init");
	SegClass (0X80485D4,"CODE");
	SegDefReg(0x80485D4,"ds",0x10);
	set_segm_type(0X80485D4,2);
	add_segm_ex(0X80485F7,0X8048600,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X80485F7,"LOAD");
	SegClass (0X80485F7,"CODE");
	SegDefReg(0x80485F7,"es",0x0);
	SegDefReg(0x80485F7,"ss",0x0);
	SegDefReg(0x80485F7,"ds",0x10);
	SegDefReg(0x80485F7,"fs",0x0);
	SegDefReg(0x80485F7,"gs",0x0);
	set_segm_type(0X80485F7,2);
	add_segm_ex(0X8048600,0X8048790,0X5,1,3,2,ADDSEG_NOSREG);
	SegRename(0X8048600,".plt");
	SegClass (0X8048600,"CODE");
	SegDefReg(0x8048600,"ds",0x10);
	set_segm_type(0X8048600,2);
	add_segm_ex(0X8048790,0X8048798,0X6,1,10,2,ADDSEG_NOSREG);
	SegRename(0X8048790,".plt.got");
	SegClass (0X8048790,"CODE");
	SegDefReg(0x8048790,"ds",0x10);
	set_segm_type(0X8048790,2);
	add_segm_ex(0X8048798,0X80487A0,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8048798,"LOAD");
	SegClass (0X8048798,"CODE");
	SegDefReg(0x8048798,"es",0x0);
	SegDefReg(0x8048798,"ss",0x0);
	SegDefReg(0x8048798,"ds",0x10);
	SegDefReg(0x8048798,"fs",0x0);
	SegDefReg(0x8048798,"gs",0x0);
	set_segm_type(0X8048798,2);
	add_segm_ex(0X80487A0,0X804B3A2,0X7,1,3,2,ADDSEG_NOSREG);
	SegRename(0X80487A0,".text");
	SegClass (0X80487A0,"CODE");
	SegDefReg(0x80487A0,"ds",0x10);
	set_segm_type(0X80487A0,2);
	add_segm_ex(0X804B3A2,0X804B3A4,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804B3A2,"LOAD");
	SegClass (0X804B3A2,"CODE");
	SegDefReg(0x804B3A2,"es",0x0);
	SegDefReg(0x804B3A2,"ss",0x0);
	SegDefReg(0x804B3A2,"ds",0x10);
	SegDefReg(0x804B3A2,"fs",0x0);
	SegDefReg(0x804B3A2,"gs",0x0);
	set_segm_type(0X804B3A2,2);
	add_segm_ex(0X804B3A4,0X804B3B8,0X8,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804B3A4,".fini");
	SegClass (0X804B3A4,"CODE");
	SegDefReg(0x804B3A4,"ds",0x10);
	set_segm_type(0X804B3A4,2);
	add_segm_ex(0X804B3B8,0X804B7ED,0X9,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804B3B8,".rodata");
	SegClass (0X804B3B8,"CONST");
	SegDefReg(0x804B3B8,"ds",0x10);
	set_segm_type(0X804B3B8,3);
	add_segm_ex(0X804B7ED,0X804B7F0,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804B7ED,"LOAD");
	SegClass (0X804B7ED,"CODE");
	SegDefReg(0x804B7ED,"es",0x0);
	SegDefReg(0x804B7ED,"ss",0x0);
	SegDefReg(0x804B7ED,"ds",0x10);
	SegDefReg(0x804B7ED,"fs",0x0);
	SegDefReg(0x804B7ED,"gs",0x0);
	set_segm_type(0X804B7ED,2);
	add_segm_ex(0X804B7F0,0X804B8A4,0XA,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804B7F0,".eh_frame_hdr");
	SegClass (0X804B7F0,"CONST");
	SegDefReg(0x804B7F0,"ds",0x10);
	set_segm_type(0X804B7F0,3);
	add_segm_ex(0X804B8A4,0X804BB68,0XB,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804B8A4,".eh_frame");
	SegClass (0X804B8A4,"CONST");
	SegDefReg(0x804B8A4,"ds",0x10);
	set_segm_type(0X804B8A4,3);
	add_segm_ex(0X804CF0C,0X804CF10,0XC,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804CF0C,".init_array");
	SegClass (0X804CF0C,"DATA");
	SegDefReg(0x804CF0C,"ds",0x10);
	set_segm_type(0X804CF0C,3);
	add_segm_ex(0X804CF10,0X804CF14,0XD,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804CF10,".fini_array");
	SegClass (0X804CF10,"DATA");
	SegDefReg(0x804CF10,"ds",0x10);
	set_segm_type(0X804CF10,3);
	add_segm_ex(0X804CF14,0X804CFFC,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804CF14,"LOAD");
	SegClass (0X804CF14,"DATA");
	SegDefReg(0x804CF14,"es",0x0);
	SegDefReg(0x804CF14,"ss",0x0);
	SegDefReg(0x804CF14,"ds",0x10);
	SegDefReg(0x804CF14,"fs",0x0);
	SegDefReg(0x804CF14,"gs",0x0);
	set_segm_type(0X804CF14,3);
	add_segm_ex(0X804CFFC,0X804D000,0XE,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804CFFC,".got");
	SegClass (0X804CFFC,"DATA");
	SegDefReg(0x804CFFC,"ds",0x10);
	set_segm_type(0X804CFFC,3);
	add_segm_ex(0X804D000,0X804D06C,0XF,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804D000,".got.plt");
	SegClass (0X804D000,"DATA");
	SegDefReg(0x804D000,"ds",0x10);
	set_segm_type(0X804D000,3);
	add_segm_ex(0X804D06C,0X804D078,0X10,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804D06C,".data");
	SegClass (0X804D06C,"DATA");
	SegDefReg(0x804D06C,"ds",0x10);
	set_segm_type(0X804D06C,3);
	add_segm_ex(0X804D078,0X804D080,0X2,1,6,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804D078,"LOAD");
	SegClass (0X804D078,"DATA");
	SegDefReg(0x804D078,"es",0x0);
	SegDefReg(0x804D078,"ss",0x0);
	SegDefReg(0x804D078,"ds",0x10);
	SegDefReg(0x804D078,"fs",0x0);
	SegDefReg(0x804D078,"gs",0x0);
	set_segm_type(0X804D078,3);
	add_segm_ex(0X804D080,0X804D4A8,0X11,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804D080,".bss");
	SegClass (0X804D080,"BSS");
	SegDefReg(0x804D080,"ds",0x10);
	set_segm_type(0X804D080,9);
	add_segm_ex(0X804D4A8,0X804D50C,0X12,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804D4A8,"extern");
	SegClass (0X804D4A8,"extern");
	set_segm_type(0X804D4A8,1);
	set_inf_attr(INF_LOW_OFF, 0x8048000);
	set_inf_attr(INF_HIGH_OFF, 0x804D50C);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf32_Sym");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int8");
	SetType(get_member_id(id, 0xD), "unsigned __int8");
	SetType(get_member_id(id, 0xE), "unsigned __int16");
	id = get_struc_id("sig");
	id = get_struc_id("num_unit");
	SetType(get_member_id(id, 0x4), "__int64");
	SetType(get_member_id(id, 0x10), "char *");
	id = get_struc_id("unit");
	SetType(get_member_id(id, 0x8), "num_unit *");
	id = get_struc_id("Elf32_Rel");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	id = get_struc_id("Elf32_Dyn");
	SetType(get_member_id(id, 0x0), "__int32");
	SetType(get_member_id(id, 0x4), "union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x1), "unsigned __int32");
	id = get_struc_id("Elf32_Verneed");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int32");
	id = get_struc_id("Elf32_Vernaux");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int32");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf32_Sym",0);
	id = add_struc(-1,"sig",0);
	id = add_struc(-1,"num_unit",0);
	id = add_struc(-1,"unit",0);
	id = add_struc(-1,"Elf32_Rel",0);
	id = add_struc(-1,"Elf32_Dyn",0);
	id = add_struc(-1,"Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249",1);
	id = add_struc(-1,"Elf32_Verneed",0);
	id = add_struc(-1,"Elf32_Vernaux",0);
	
	id = get_struc_id("Elf32_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x20500400,	0X8048384,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_value",	0X4,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_info",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_other",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_shndx",	0XE,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("sig");
	mid = add_struc_member(id,"SYM",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"op_priority",	0X4,	0x20000400,	-1,	4);
	
	id = get_struc_id("num_unit");
	mid = add_struc_member(id,"sign",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_big_num",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"num",	0X4,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"big_num_len",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"big_num",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("unit");
	mid = add_struc_member(id,"op",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"op_priority",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"num_unit",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("Elf32_Rel");
	mid = add_struc_member(id,"r_offset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r_info",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	mid = add_struc_member(id,"d_val",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_ptr",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_un",	0X4,	0x60000400,	get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Verneed");
	mid = add_struc_member(id,"vn_version",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vn_cnt",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vn_file",	0X4,	0x20500400,	0X8048384,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vn_aux",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"vn_next",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Vernaux");
	mid = add_struc_member(id,"vna_hash",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"vna_flags",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vna_other",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vna_name",	0X8,	0x20500400,	0X8048384,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vna_next",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0X8048000,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0X8048000,	E_PREV + 0,	"; File Name   : /Users/hzshang/Downloads/calc/calc");
	update_extra_cmt		(0X8048000,	E_PREV + 1,	"; Format      : ELF for Intel 386 (Executable)");
	update_extra_cmt		(0X8048000,	E_PREV + 2,	"; Imagebase   : 8048000");
	update_extra_cmt		(0X8048000,	E_PREV + 3,	"; Interpreter '/lib/ld-linux.so.2'");
	update_extra_cmt		(0X8048000,	E_PREV + 4,	"; Needed Library 'libc.so.6'");
	update_extra_cmt		(0X8048000,	E_PREV + 5,	"; ");
	create_dword	(x=0X8048000);
	op_hex		(x,	0);
	set_cmt	(0X8048004,	"File class: 32-bit",	0);
	create_byte	(x=0X8048004);
	op_hex		(x,	0);
	set_cmt	(0X8048005,	"Data encoding: little-endian",	0);
	create_byte	(x=0X8048005);
	op_hex		(x,	0);
	set_cmt	(0X8048006,	"File version",	0);
	create_byte	(x=0X8048006);
	op_hex		(x,	0);
	set_cmt	(0X8048007,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X8048007);
	op_hex		(x,	0);
	set_cmt	(0X8048008,	"ABI Version",	0);
	create_byte	(x=0X8048008);
	op_hex		(x,	0);
	set_cmt	(0X8048009,	"Padding",	0);
	create_byte	(x=0X8048009);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X8048010,	"File type: Executable",	0);
	create_word	(x=0X8048010);
	op_hex		(x,	0);
	set_cmt	(0X8048012,	"Machine: Intel 386",	0);
	create_word	(x=0X8048012);
	op_hex		(x,	0);
	set_cmt	(0X8048014,	"File version",	0);
	create_dword	(x=0X8048014);
	op_hex		(x,	0);
	set_cmt	(0X8048018,	"Entry point",	0);
	create_dword	(x=0X8048018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X804801C,	"PHT file offset",	0);
	create_dword	(x=0X804801C);
	op_hex		(x,	0);
	set_cmt	(0X8048020,	"SHT file offset",	0);
	create_dword	(x=0X8048020);
	op_hex		(x,	0);
	set_cmt	(0X8048024,	"Processor-specific flags",	0);
	create_dword	(x=0X8048024);
	op_hex		(x,	0);
	set_cmt	(0X8048028,	"ELF header size",	0);
	create_word	(x=0X8048028);
	op_hex		(x,	0);
	set_cmt	(0X804802A,	"PHT entry size",	0);
	create_word	(x=0X804802A);
	op_hex		(x,	0);
	set_cmt	(0X804802C,	"Number of entries in PHT",	0);
	create_word	(x=0X804802C);
	op_hex		(x,	0);
	set_cmt	(0X804802E,	"SHT entry size",	0);
	create_word	(x=0X804802E);
	op_hex		(x,	0);
	set_cmt	(0X8048030,	"Number of entries in SHT",	0);
	create_word	(x=0X8048030);
	op_hex		(x,	0);
	set_cmt	(0X8048032,	"SHT entry index for string table",	0);
	create_word	(x=0X8048032);
	op_hex		(x,	0);
	set_cmt	(0X8048034,	"Type: PHDR",	0);
	update_extra_cmt		(0X8048034,	E_PREV + 0,	"; ELF32 Program Header");
	update_extra_cmt		(0X8048034,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X8048034);
	op_hex		(x,	0);
	set_cmt	(0X8048038,	"File offset",	0);
	create_dword	(x=0X8048038);
	op_hex		(x,	0);
	set_cmt	(0X804803C,	"Virtual address",	0);
	create_dword	(x=0X804803C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048040,	"Physical address",	0);
	create_dword	(x=0X8048040);
	op_hex		(x,	0);
	set_cmt	(0X8048044,	"Size in file image",	0);
	create_dword	(x=0X8048044);
	op_hex		(x,	0);
	set_cmt	(0X8048048,	"Size in memory image",	0);
	create_dword	(x=0X8048048);
	op_hex		(x,	0);
	set_cmt	(0X804804C,	"Flags",	0);
	create_dword	(x=0X804804C);
	op_hex		(x,	0);
	set_cmt	(0X8048050,	"Alignment",	0);
	create_dword	(x=0X8048050);
	op_hex		(x,	0);
	set_cmt	(0X8048054,	"Type: INTERP",	0);
	update_extra_cmt		(0X8048054,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X8048054);
	op_hex		(x,	0);
	set_cmt	(0X8048058,	"File offset",	0);
	create_dword	(x=0X8048058);
	op_hex		(x,	0);
	set_cmt	(0X804805C,	"Virtual address",	0);
	create_dword	(x=0X804805C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048060,	"Physical address",	0);
	create_dword	(x=0X8048060);
	op_hex		(x,	0);
	set_cmt	(0X8048064,	"Size in file image",	0);
	create_dword	(x=0X8048064);
	op_hex		(x,	0);
	set_cmt	(0X8048068,	"Size in memory image",	0);
	create_dword	(x=0X8048068);
	op_hex		(x,	0);
	set_cmt	(0X804806C,	"Flags",	0);
	create_dword	(x=0X804806C);
	op_hex		(x,	0);
	set_cmt	(0X8048070,	"Alignment",	0);
	create_dword	(x=0X8048070);
	op_hex		(x,	0);
	set_cmt	(0X8048074,	"Type: LOAD",	0);
	update_extra_cmt		(0X8048074,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0X8048074);
	op_hex		(x,	0);
	set_cmt	(0X8048078,	"File offset",	0);
	create_dword	(x=0X8048078);
	op_hex		(x,	0);
	set_cmt	(0X804807C,	"Virtual address",	0);
	create_dword	(x=0X804807C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048080,	"Physical address",	0);
	create_dword	(x=0X8048080);
	op_hex		(x,	0);
	set_cmt	(0X8048084,	"Size in file image",	0);
	create_dword	(x=0X8048084);
	op_hex		(x,	0);
	set_cmt	(0X8048088,	"Size in memory image",	0);
	create_dword	(x=0X8048088);
	op_hex		(x,	0);
	set_cmt	(0X804808C,	"Flags",	0);
	create_dword	(x=0X804808C);
	op_hex		(x,	0);
	set_cmt	(0X8048090,	"Alignment",	0);
	create_dword	(x=0X8048090);
	op_hex		(x,	0);
	set_cmt	(0X8048094,	"Type: LOAD",	0);
	update_extra_cmt		(0X8048094,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0X8048094);
	op_hex		(x,	0);
	set_cmt	(0X8048098,	"File offset",	0);
	create_dword	(x=0X8048098);
	op_hex		(x,	0);
	set_cmt	(0X804809C,	"Virtual address",	0);
	create_dword	(x=0X804809C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480A0,	"Physical address",	0);
	create_dword	(x=0X80480A0);
	op_hex		(x,	0);
	set_cmt	(0X80480A4,	"Size in file image",	0);
	create_dword	(x=0X80480A4);
	op_hex		(x,	0);
	set_cmt	(0X80480A8,	"Size in memory image",	0);
	create_dword	(x=0X80480A8);
	op_hex		(x,	0);
	set_cmt	(0X80480AC,	"Flags",	0);
	create_dword	(x=0X80480AC);
	op_hex		(x,	0);
	set_cmt	(0X80480B0,	"Alignment",	0);
	create_dword	(x=0X80480B0);
	op_hex		(x,	0);
	set_cmt	(0X80480B4,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0X80480B4,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0X80480B4);
	op_hex		(x,	0);
	set_cmt	(0X80480B8,	"File offset",	0);
	create_dword	(x=0X80480B8);
	op_hex		(x,	0);
	set_cmt	(0X80480BC,	"Virtual address",	0);
	create_dword	(x=0X80480BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480C0,	"Physical address",	0);
	create_dword	(x=0X80480C0);
	op_hex		(x,	0);
	set_cmt	(0X80480C4,	"Size in file image",	0);
	create_dword	(x=0X80480C4);
	op_hex		(x,	0);
	set_cmt	(0X80480C8,	"Size in memory image",	0);
	create_dword	(x=0X80480C8);
	op_hex		(x,	0);
	set_cmt	(0X80480CC,	"Flags",	0);
	create_dword	(x=0X80480CC);
	op_hex		(x,	0);
	set_cmt	(0X80480D0,	"Alignment",	0);
	create_dword	(x=0X80480D0);
	op_hex		(x,	0);
	set_cmt	(0X80480D4,	"Type: NOTE",	0);
	update_extra_cmt		(0X80480D4,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0X80480D4);
	op_hex		(x,	0);
	set_cmt	(0X80480D8,	"File offset",	0);
	create_dword	(x=0X80480D8);
	op_hex		(x,	0);
	set_cmt	(0X80480DC,	"Virtual address",	0);
	create_dword	(x=0X80480DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480E0,	"Physical address",	0);
	create_dword	(x=0X80480E0);
	op_hex		(x,	0);
	set_cmt	(0X80480E4,	"Size in file image",	0);
	create_dword	(x=0X80480E4);
	op_hex		(x,	0);
	set_cmt	(0X80480E8,	"Size in memory image",	0);
	create_dword	(x=0X80480E8);
	op_hex		(x,	0);
	set_cmt	(0X80480EC,	"Flags",	0);
	create_dword	(x=0X80480EC);
	op_hex		(x,	0);
	set_cmt	(0X80480F0,	"Alignment",	0);
	create_dword	(x=0X80480F0);
	op_hex		(x,	0);
	set_cmt	(0X80480F4,	"Type: EH_FRAME",	0);
	update_extra_cmt		(0X80480F4,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0X80480F4);
	op_hex		(x,	0);
	set_cmt	(0X80480F8,	"File offset",	0);
	create_dword	(x=0X80480F8);
	op_hex		(x,	0);
	set_cmt	(0X80480FC,	"Virtual address",	0);
	create_dword	(x=0X80480FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048100,	"Physical address",	0);
	create_dword	(x=0X8048100);
	op_hex		(x,	0);
	set_cmt	(0X8048104,	"Size in file image",	0);
	create_dword	(x=0X8048104);
	op_hex		(x,	0);
	set_cmt	(0X8048108,	"Size in memory image",	0);
	create_dword	(x=0X8048108);
	op_hex		(x,	0);
	set_cmt	(0X804810C,	"Flags",	0);
	create_dword	(x=0X804810C);
	op_hex		(x,	0);
	set_cmt	(0X8048110,	"Alignment",	0);
	create_dword	(x=0X8048110);
	op_hex		(x,	0);
	set_cmt	(0X8048114,	"Type: STACK",	0);
	update_extra_cmt		(0X8048114,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X8048114);
	op_hex		(x,	0);
	set_cmt	(0X8048118,	"File offset",	0);
	create_dword	(x=0X8048118);
	op_hex		(x,	0);
	set_cmt	(0X804811C,	"Virtual address",	0);
	create_dword	(0X804811C);
	set_cmt	(0X8048120,	"Physical address",	0);
	create_dword	(x=0X8048120);
	op_hex		(x,	0);
	set_cmt	(0X8048124,	"Size in file image",	0);
	create_dword	(x=0X8048124);
	op_hex		(x,	0);
	set_cmt	(0X8048128,	"Size in memory image",	0);
	create_dword	(x=0X8048128);
	op_hex		(x,	0);
	set_cmt	(0X804812C,	"Flags",	0);
	create_dword	(x=0X804812C);
	op_hex		(x,	0);
	set_cmt	(0X8048130,	"Alignment",	0);
	create_dword	(x=0X8048130);
	op_hex		(x,	0);
	set_cmt	(0X8048134,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X8048134,	E_PREV + 0,	"; PHT Entry 8");
	create_dword	(x=0X8048134);
	op_hex		(x,	0);
	set_cmt	(0X8048138,	"File offset",	0);
	create_dword	(x=0X8048138);
	op_hex		(x,	0);
	set_cmt	(0X804813C,	"Virtual address",	0);
	create_dword	(x=0X804813C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048140,	"Physical address",	0);
	create_dword	(x=0X8048140);
	op_hex		(x,	0);
	set_cmt	(0X8048144,	"Size in file image",	0);
	create_dword	(x=0X8048144);
	op_hex		(x,	0);
	set_cmt	(0X8048148,	"Size in memory image",	0);
	create_dword	(x=0X8048148);
	op_hex		(x,	0);
	set_cmt	(0X804814C,	"Flags",	0);
	create_dword	(x=0X804814C);
	op_hex		(x,	0);
	set_cmt	(0X8048150,	"Alignment",	0);
	create_dword	(x=0X8048150);
	op_hex		(x,	0);
	create_strlit	(0X8048154,	0X8048167);
	set_name	(0X8048154,	"aLibLdLinuxSo2");
	create_dword	(0X8048168);
	make_array	(0X8048168,	0X5);
	create_dword	(0X804817C);
	make_array	(0X804817C,	0X3);
	update_extra_cmt		(0X8048188,	E_PREV + 0,	"; ELF GNU Hash Table");
	create_dword	(x=0X8048188);
	op_hex		(x,	0);
	set_name	(0X8048188,	"elf_gnu_hash_nbuckets");
	create_dword	(x=0X804818C);
	op_hex		(x,	0);
	set_name	(0X804818C,	"elf_gnu_hash_symbias");
	create_dword	(x=0X8048190);
	op_hex		(x,	0);
	set_name	(0X8048190,	"elf_gnu_hash_bitmask_nwords");
	create_dword	(x=0X8048194);
	op_hex		(x,	0);
	set_name	(0X8048194,	"elf_gnu_hash_shift");
	create_dword	(x=0X8048198);
	op_hex		(x,	0);
	set_name	(0X8048198,	"elf_gnu_hash_indexes");
	create_dword	(x=0X804819C);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X804819C,	"elf_gnu_hash_bucket");
	create_dword	(x=0X80481A8);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X80481A8,	"elf_gnu_hash_chain");
	update_extra_cmt		(0X80481B4,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X80481B4,	"Elf32_Sym");
	MakeStruct	(0X80481C4,	"Elf32_Sym");
	MakeStruct	(0X80481D4,	"Elf32_Sym");
	MakeStruct	(0X80481E4,	"Elf32_Sym");
	MakeStruct	(0X80481F4,	"Elf32_Sym");
	MakeStruct	(0X8048204,	"Elf32_Sym");
	MakeStruct	(0X8048214,	"Elf32_Sym");
	MakeStruct	(0X8048224,	"Elf32_Sym");
	MakeStruct	(0X8048234,	"Elf32_Sym");
	MakeStruct	(0X8048244,	"Elf32_Sym");
	MakeStruct	(0X8048254,	"Elf32_Sym");
	MakeStruct	(0X8048264,	"Elf32_Sym");
	MakeStruct	(0X8048274,	"Elf32_Sym");
	MakeStruct	(0X8048284,	"Elf32_Sym");
	MakeStruct	(0X8048294,	"Elf32_Sym");
	MakeStruct	(0X80482A4,	"Elf32_Sym");
	MakeStruct	(0X80482B4,	"Elf32_Sym");
	MakeStruct	(0X80482C4,	"Elf32_Sym");
	MakeStruct	(0X80482D4,	"Elf32_Sym");
	MakeStruct	(0X80482E4,	"Elf32_Sym");
	MakeStruct	(0X80482F4,	"Elf32_Sym");
	MakeStruct	(0X8048304,	"Elf32_Sym");
	MakeStruct	(0X8048314,	"Elf32_Sym");
	MakeStruct	(0X8048324,	"Elf32_Sym");
	MakeStruct	(0X8048334,	"Elf32_Sym");
	MakeStruct	(0X8048344,	"Elf32_Sym");
	MakeStruct	(0X8048354,	"Elf32_Sym");
	MakeStruct	(0X8048364,	"Elf32_Sym");
	MakeStruct	(0X8048374,	"Elf32_Sym");
	update_extra_cmt		(0X8048384,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X8048384);
	create_strlit	(0X8048385,	0X804838F);
	set_name	(0X8048385,	"aLibcSo6");
	create_strlit	(0X804838F,	0X804839E);
	set_name	(0X804838F,	"aIoStdinUsed");
	create_strlit	(0X804839E,	0X80483A3);
	set_name	(0X804839E,	"aExit");
	create_strlit	(0X80483A3,	0X80483AB);
	set_name	(0X80483A3,	"aSprintf");
	create_strlit	(0X80483AB,	0X80483B1);
	set_name	(0X80483AB,	"aFopen");
	create_strlit	(0X80483B1,	0X80483B9);
	set_name	(0X80483B1,	"aStrncmp");
	create_strlit	(0X80483B9,	0X80483C0);
	set_name	(0X80483B9,	"aPerror");
	create_strlit	(0X80483C0,	0X80483C8);
	set_name	(0X80483C0,	"aStrncpy");
	create_strlit	(0X80483C8,	0X80483CD);
	set_name	(0X80483C8,	"aPuts");
	create_strlit	(0X80483CD,	0X80483DE);
	set_name	(0X80483CD,	"aStackChkFail");
	create_strlit	(0X80483DE,	0X80483E4);
	set_name	(0X80483DE,	"aStdin");
	create_strlit	(0X80483E4,	0X80483EB);
	set_name	(0X80483E4,	"aStrdup");
	create_strlit	(0X80483EB,	0X80483F2);
	set_name	(0X80483EB,	"aCalloc");
	create_strlit	(0X80483F2,	0X80483F9);
	set_name	(0X80483F2,	"aStrlen");
	create_strlit	(0X80483F9,	0X8048400);
	set_name	(0X80483F9,	"aMemset");
	create_strlit	(0X8048400,	0X8048405);
	set_name	(0X8048400,	"aRead");
	create_strlit	(0X8048405,	0X804840C);
	set_name	(0X8048405,	"aStdout");
	create_strlit	(0X804840C,	0X8048413);
	set_name	(0X804840C,	"aMemcpy");
	create_strlit	(0X8048413,	0X804841A);
	set_name	(0X8048413,	"aFclose");
	create_strlit	(0X804841A,	0X8048421);
	set_name	(0X804841A,	"aMalloc");
	create_strlit	(0X8048421,	0X8048428);
	set_name	(0X8048421,	"aFscanf");
	create_strlit	(0X8048428,	0X804842D);
	set_name	(0X8048428,	"aAtol");
	create_strlit	(0X804842D,	0X8048435);
	set_name	(0X804842D,	"aSetvbuf");
	create_strlit	(0X8048435,	0X8048447);
	set_name	(0X8048435,	"aLibcStartMain");
	create_strlit	(0X8048447,	0X804844D);
	set_name	(0X8048447,	"aWrite");
	create_strlit	(0X804844D,	0X8048452);
	set_name	(0X804844D,	"aFree");
	create_strlit	(0X8048452,	0X804845C);
	set_name	(0X8048452,	"aGlibc24");
	create_strlit	(0X804845C,	0X8048466);
	set_name	(0X804845C,	"aGlibc21");
	create_strlit	(0X8048466,	0X8048470);
	set_name	(0X8048466,	"aGlibc20");
	create_strlit	(0X8048470,	0X804847F);
	set_name	(0X8048470,	"aGmonStart");
	update_extra_cmt		(0X8048480,	E_PREV + 0,	"; ELF GNU Symbol Version Table");
	create_word	(0X8048480);
	set_cmt	(0X8048482,	"read@@GLIBC_2.0",	0);
	create_word	(0X8048482);
	set_cmt	(0X8048484,	"printf@@GLIBC_2.0",	0);
	create_word	(0X8048484);
	set_cmt	(0X8048486,	"free@@GLIBC_2.0",	0);
	create_word	(0X8048486);
	set_cmt	(0X8048488,	"strdup@@GLIBC_2.0",	0);
	create_word	(0X8048488);
	set_cmt	(0X804848A,	"memcpy@@GLIBC_2.0",	0);
	create_word	(0X804848A);
	set_cmt	(0X804848C,	"fclose@@GLIBC_2.1",	0);
	create_word	(0X804848C);
	set_cmt	(0X804848E,	"__stack_chk_fail@@GLIBC_2.4",	0);
	create_word	(0X804848E);
	set_cmt	(0X8048490,	"perror@@GLIBC_2.0",	0);
	create_word	(0X8048490);
	set_cmt	(0X8048492,	"malloc@@GLIBC_2.0",	0);
	create_word	(0X8048492);
	set_cmt	(0X8048494,	"puts@@GLIBC_2.0",	0);
	create_word	(0X8048494);
	set_cmt	(0X8048496,	"scanf@@GLIBC_2.0",	0);
	create_word	(0X8048496);
	set_cmt	(0X8048498,	"local  symbol: __gmon_start__",	0);
	create_word	(0X8048498);
	set_cmt	(0X804849A,	"exit@@GLIBC_2.0",	0);
	create_word	(0X804849A);
	set_cmt	(0X804849C,	"fscanf@@GLIBC_2.0",	0);
	create_word	(0X804849C);
	set_cmt	(0X804849E,	"strlen@@GLIBC_2.0",	0);
	create_word	(0X804849E);
	set_cmt	(0X80484A0,	"__libc_start_main@@GLIBC_2.0",	0);
	create_word	(0X80484A0);
	set_cmt	(0X80484A2,	"write@@GLIBC_2.0",	0);
	create_word	(0X80484A2);
	set_cmt	(0X80484A4,	"atol@@GLIBC_2.0",	0);
	create_word	(0X80484A4);
	set_cmt	(0X80484A6,	"setvbuf@@GLIBC_2.0",	0);
	create_word	(0X80484A6);
	set_cmt	(0X80484A8,	"fopen@@GLIBC_2.1",	0);
	create_word	(0X80484A8);
	set_cmt	(0X80484AA,	"memset@@GLIBC_2.0",	0);
	create_word	(0X80484AA);
	set_cmt	(0X80484AC,	"strncpy@@GLIBC_2.0",	0);
	create_word	(0X80484AC);
	set_cmt	(0X80484AE,	"sprintf@@GLIBC_2.0",	0);
	create_word	(0X80484AE);
	set_cmt	(0X80484B0,	"strncmp@@GLIBC_2.0",	0);
	create_word	(0X80484B0);
	set_cmt	(0X80484B2,	"calloc@@GLIBC_2.0",	0);
	create_word	(0X80484B2);
	set_cmt	(0X80484B4,	"stdout@@GLIBC_2.0",	0);
	create_word	(0X80484B4);
	set_cmt	(0X80484B6,	"global symbol: _IO_stdin_used",	0);
	create_word	(0X80484B6);
	set_cmt	(0X80484B8,	"stdin@@GLIBC_2.0",	0);
	create_word	(0X80484B8);
	create_word	(0X80484BA);
	update_extra_cmt		(0X80484BC,	E_PREV + 0,	"; ELF GNU Symbol Version Requirements");
	MakeStruct	(0X80484BC,	"Elf32_Verneed");
	MakeStruct	(0X80484CC,	"Elf32_Vernaux");
	MakeStruct	(0X80484DC,	"Elf32_Vernaux");
	MakeStruct	(0X80484EC,	"Elf32_Vernaux");
	set_cmt	(0X80484FC,	"R_386_GLOB_DAT __gmon_start__",	0);
	update_extra_cmt		(0X80484FC,	E_PREV + 0,	"; ELF REL Relocation Table");
	MakeStruct	(0X80484FC,	"Elf32_Rel");
	set_cmt	(0X8048504,	"R_386_COPY stdin",	0);
	MakeStruct	(0X8048504,	"Elf32_Rel");
	set_cmt	(0X804850C,	"R_386_COPY stdout",	0);
	MakeStruct	(0X804850C,	"Elf32_Rel");
	set_cmt	(0X8048514,	"R_386_JMP_SLOT read",	0);
	update_extra_cmt		(0X8048514,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X8048514,	"Elf32_Rel");
	set_cmt	(0X804851C,	"R_386_JMP_SLOT printf",	0);
	MakeStruct	(0X804851C,	"Elf32_Rel");
	set_cmt	(0X8048524,	"R_386_JMP_SLOT free",	0);
	MakeStruct	(0X8048524,	"Elf32_Rel");
	set_cmt	(0X804852C,	"R_386_JMP_SLOT strdup",	0);
	MakeStruct	(0X804852C,	"Elf32_Rel");
	set_cmt	(0X8048534,	"R_386_JMP_SLOT memcpy",	0);
	MakeStruct	(0X8048534,	"Elf32_Rel");
	set_cmt	(0X804853C,	"R_386_JMP_SLOT fclose",	0);
	MakeStruct	(0X804853C,	"Elf32_Rel");
	set_cmt	(0X8048544,	"R_386_JMP_SLOT __stack_chk_fail",	0);
	MakeStruct	(0X8048544,	"Elf32_Rel");
	set_cmt	(0X804854C,	"R_386_JMP_SLOT perror",	0);
	MakeStruct	(0X804854C,	"Elf32_Rel");
	set_cmt	(0X8048554,	"R_386_JMP_SLOT malloc",	0);
	MakeStruct	(0X8048554,	"Elf32_Rel");
	set_cmt	(0X804855C,	"R_386_JMP_SLOT puts",	0);
	MakeStruct	(0X804855C,	"Elf32_Rel");
	set_cmt	(0X8048564,	"R_386_JMP_SLOT scanf",	0);
	MakeStruct	(0X8048564,	"Elf32_Rel");
	set_cmt	(0X804856C,	"R_386_JMP_SLOT exit",	0);
	MakeStruct	(0X804856C,	"Elf32_Rel");
	set_cmt	(0X8048574,	"R_386_JMP_SLOT fscanf",	0);
	MakeStruct	(0X8048574,	"Elf32_Rel");
	set_cmt	(0X804857C,	"R_386_JMP_SLOT strlen",	0);
	MakeStruct	(0X804857C,	"Elf32_Rel");
	set_cmt	(0X8048584,	"R_386_JMP_SLOT __libc_start_main",	0);
	MakeStruct	(0X8048584,	"Elf32_Rel");
	set_cmt	(0X804858C,	"R_386_JMP_SLOT write",	0);
	MakeStruct	(0X804858C,	"Elf32_Rel");
	set_cmt	(0X8048594,	"R_386_JMP_SLOT atol",	0);
	MakeStruct	(0X8048594,	"Elf32_Rel");
	set_cmt	(0X804859C,	"R_386_JMP_SLOT setvbuf",	0);
	MakeStruct	(0X804859C,	"Elf32_Rel");
	set_cmt	(0X80485A4,	"R_386_JMP_SLOT fopen",	0);
	MakeStruct	(0X80485A4,	"Elf32_Rel");
	set_cmt	(0X80485AC,	"R_386_JMP_SLOT memset",	0);
	MakeStruct	(0X80485AC,	"Elf32_Rel");
	set_cmt	(0X80485B4,	"R_386_JMP_SLOT strncpy",	0);
	MakeStruct	(0X80485B4,	"Elf32_Rel");
	set_cmt	(0X80485BC,	"R_386_JMP_SLOT sprintf",	0);
	MakeStruct	(0X80485BC,	"Elf32_Rel");
	set_cmt	(0X80485C4,	"R_386_JMP_SLOT strncmp",	0);
	MakeStruct	(0X80485C4,	"Elf32_Rel");
	set_cmt	(0X80485CC,	"R_386_JMP_SLOT calloc",	0);
	MakeStruct	(0X80485CC,	"Elf32_Rel");
	create_insn	(0X80485D4);
	set_name	(0X80485D4,	".init_proc");
	create_insn	(x=0X80485D5);
	op_hex		(x,	1);
	create_insn	(x=0X80485E3);
	op_plain_offset	(x,	1,	0X804D000);
	op_plain_offset	(x,	129,	0X804D000);
	create_insn	(x=0X80485F2);
	op_hex		(x,	1);
	make_array	(0X80485F7,	0X9);
	create_insn	(0X8048600);
	make_array	(0X804860C,	0X4);
	create_insn	(0X8048610);
	set_name	(0X8048610,	".read");
	create_insn	(0X8048616);
	create_insn	(0X8048620);
	set_name	(0X8048620,	".printf");
	create_insn	(0X8048626);
	create_insn	(0X8048630);
	set_name	(0X8048630,	".free");
	create_insn	(0X8048636);
	create_insn	(0X8048640);
	set_name	(0X8048640,	".strdup");
	create_insn	(0X8048646);
	create_insn	(0X8048650);
	set_name	(0X8048650,	".memcpy");
	create_insn	(0X8048656);
	create_insn	(0X8048660);
	set_name	(0X8048660,	".fclose");
	create_insn	(0X8048666);
	create_insn	(0X8048670);
	set_name	(0X8048670,	".__stack_chk_fail");
	create_insn	(0X8048676);
	create_insn	(0X8048680);
	set_name	(0X8048680,	".perror");
	create_insn	(0X8048686);
	create_insn	(0X8048690);
	set_name	(0X8048690,	".malloc");
	create_insn	(0X8048696);
	create_insn	(0X80486A0);
	set_name	(0X80486A0,	".puts");
	create_insn	(0X80486A6);
	create_insn	(0X80486B0);
	set_name	(0X80486B0,	".scanf");
	create_insn	(0X80486B6);
	create_insn	(0X80486C0);
	set_name	(0X80486C0,	".exit");
	create_insn	(0X80486C6);
	create_insn	(0X80486D0);
	set_name	(0X80486D0,	".fscanf");
	create_insn	(0X80486D6);
	create_insn	(0X80486E0);
	set_name	(0X80486E0,	".strlen");
	create_insn	(0X80486E6);
	create_insn	(0X80486F0);
	set_name	(0X80486F0,	".__libc_start_main");
	create_insn	(0X80486F6);
	create_insn	(0X8048700);
	set_name	(0X8048700,	".write");
	create_insn	(0X8048706);
	create_insn	(0X8048710);
	set_name	(0X8048710,	".atol");
	create_insn	(0X8048716);
	create_insn	(0X8048720);
	set_name	(0X8048720,	".setvbuf");
	create_insn	(0X8048726);
	create_insn	(0X8048730);
	set_name	(0X8048730,	".fopen");
	create_insn	(0X8048736);
	create_insn	(0X8048740);
	set_name	(0X8048740,	".memset");
	create_insn	(0X8048746);
	create_insn	(0X8048750);
	set_name	(0X8048750,	".strncpy");
	create_insn	(0X8048756);
	create_insn	(0X8048760);
	set_name	(0X8048760,	".sprintf");
	create_insn	(0X8048766);
	create_insn	(0X8048770);
	set_name	(0X8048770,	".strncmp");
	create_insn	(0X8048776);
	create_insn	(0X8048780);
	set_name	(0X8048780,	".calloc");
	create_insn	(0X8048786);
	create_insn	(0X8048790);
	set_name	(0X8048790,	"__gmon_start__");
	make_array	(0X8048796,	0X2);
	make_array	(0X8048798,	0X8);
	create_insn	(0X80487A0);
	set_name	(0X80487A0,	"start");
	create_insn	(x=0X80487A5);
	op_hex		(x,	1);
	set_cmt	(0X80487A9,	"stack_end",	0);
	set_cmt	(0X80487AA,	"rtld_fini",	0);
	set_cmt	(0X80487AB,	"fini",	0);
	create_insn	(x=0X80487AB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80487B0,	"init",	0);
	create_insn	(x=0X80487B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80487B5,	"ubp_av",	0);
	set_cmt	(0X80487B6,	"argc",	0);
	set_cmt	(0X80487B7,	"main",	0);
	create_insn	(x=0X80487B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X80487C2,	0XE);
	create_insn	(x=0X80487D0);
	op_stkvar	(x,	1);
	make_array	(0X80487D4,	0XC);
	create_insn	(x=0X80487E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80487E5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80487F8);
	op_hex		(x,	1);
	create_insn	(x=0X80487FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048802);
	op_hex		(x,	1);
	make_array	(0X8048807,	0X9);
	create_insn	(0X8048810);
	make_array	(0X8048812,	0XE);
	create_insn	(x=0X8048820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048825);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804882A);
	op_hex		(x,	1);
	create_insn	(x=0X804882F);
	op_hex		(x,	1);
	create_insn	(x=0X8048834);
	op_hex		(x,	1);
	create_insn	(x=0X8048844);
	op_hex		(x,	1);
	create_insn	(x=0X8048848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804884F);
	op_hex		(x,	1);
	make_array	(0X8048854,	0X4);
	create_insn	(0X8048858);
	set_name	(0X8048858,	"nullsub_2");
	make_array	(0X804885A,	0X6);
	create_insn	(0X8048860);
	create_insn	(x=0X804886C);
	op_hex		(x,	1);
	make_array	(0X804887D,	0X3);
	create_insn	(0X8048880);
	make_array	(0X8048882,	0XE);
	create_insn	(0X8048890);
	make_array	(0X8048896,	0XA);
	create_insn	(0X80488A0);
	create_insn	(x=0X80488A3);
	op_hex		(x,	1);
	create_insn	(x=0X80488AC);
	op_hex		(x,	1);
	create_insn	(0X80488D2);
	create_insn	(0X80488DB);
	create_insn	(x=0X80488E2);
	op_hex		(x,	1);
	create_insn	(x=0X80488E7);
	op_hex		(x,	1);
	make_array	(0X80488EC,	0X4);
	create_insn	(0X80488F0);
	set_name	(0X80488F0,	"init_num_unit");
	create_insn	(x=0X80488F3);
	op_hex		(x,	1);
	create_insn	(x=0X8048903);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048906);
	op_stkvar	(x,	1);
	create_insn	(x=0X804890D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048913);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048924);
	op_stkvar	(x,	1);
	create_insn	(x=0X804892E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048938);
	op_stkvar	(x,	1);
	create_insn	(x=0X804893B);
	op_hex		(x,	1);
	create_insn	(0X8048940);
	set_name	(0X8048940,	"init_unit");
	create_insn	(x=0X8048943);
	op_hex		(x,	1);
	create_insn	(x=0X8048946);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048949);
	op_stkvar	(x,	1);
	set_cmt	(0X8048951,	"size",	0);
	create_insn	(x=0X8048958);
	op_stkvar	(x,	0);
	create_insn	(x=0X804895B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804895E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048966);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048969);
	op_stkvar	(x,	1);
	create_insn	(x=0X804896E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048976);
	op_stkvar	(x,	1);
	create_insn	(x=0X804897C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804897F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048985);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048988);
	op_hex		(x,	1);
	make_array	(0X804898D,	0X3);
	create_insn	(0X8048990);
	set_name	(0X8048990,	"skip_zero");
	create_insn	(x=0X8048993);
	op_hex		(x,	1);
	create_insn	(x=0X8048996);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048999);
	op_stkvar	(x,	1);
	create_insn	(x=0X804899C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804899F);
	op_stkvar	(x,	0);
	create_insn	(x=0X80489A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X80489A9);
	op_stkvar	(x,	0);
	create_insn	(x=0X80489AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X80489AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489D4);
	op_stkvar	(x,	0);
	create_insn	(0X80489DC);
	create_insn	(0X80489E1);
	create_insn	(x=0X80489E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X80489F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80489F7);
	op_hex		(x,	1);
	make_array	(0X80489FC,	0X4);
	create_insn	(0X8048A00);
	create_insn	(x=0X8048A04);
	op_hex		(x,	1);
	create_insn	(x=0X8048A07);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A14);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A17);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A31);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A49);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A52);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A5B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A65);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A71);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A8A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048A93);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048A9D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AAF);
	op_stkvar	(x,	0);
	create_insn	(0X8048AB8);
	create_insn	(0X8048ABD);
	create_insn	(x=0X8048AC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AC8);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048AD0);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AD7);
	op_hex		(x,	1);
	create_insn	(x=0X8048ADC);
	op_hex		(x,	1);
	make_array	(0X8048AE2,	0XE);
	create_insn	(0X8048AF0);
	set_name	(0X8048AF0,	"chr2int");
	create_insn	(x=0X8048AF3);
	op_hex		(x,	1);
	create_insn	(x=0X8048AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B00);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B09);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B25);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B2F);
	op_hex		(x,	1);
	make_array	(0X8048B34,	0XC);
	create_insn	(0X8048B40);
	set_name	(0X8048B40,	"get_char");
	make_array	(0X8048B54,	0XC);
	create_insn	(0X8048B60);
	set_name	(0X8048B60,	"get_num");
	create_insn	(x=0X8048B63);
	op_hex		(x,	1);
	create_insn	(x=0X8048B76);
	op_hex		(x,	1);
	make_array	(0X8048B7B,	0X5);
	create_insn	(0X8048B80);
	set_name	(0X8048B80,	"free_num_unit");
	create_insn	(x=0X8048B83);
	op_hex		(x,	1);
	create_insn	(x=0X8048B89);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B93);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B99);
	op_hex		(x,	1);
	create_insn	(x=0X8048B9D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048BA9);
	op_hex		(x,	1);
	create_insn	(x=0X8048BB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048BC2);
	op_stkvar	(x,	1);
	set_cmt	(0X8048BC8,	"s",	0);
	set_cmt	(0X8048BCB,	"format",	0);
	create_insn	(x=0X8048BD8);
	op_stkvar	(x,	1);
	set_cmt	(0X8048BDE,	"s",	0);
	create_insn	(x=0X8048BE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048BEC);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048BF2);
	op_stkvar	(x,	1);
	set_cmt	(0X8048BF8,	"ptr",	0);
	create_insn	(x=0X8048C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048C12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048C1D);
	op_hex		(x,	1);
	create_insn	(0X8048C25);
	make_array	(0X8048C2A,	0X6);
	create_insn	(0X8048C30);
	set_name	(0X8048C30,	"free_unit");
	create_insn	(x=0X8048C33);
	op_hex		(x,	1);
	create_insn	(x=0X8048C36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048C39);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048C42);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C4A);
	op_stkvar	(x,	1);
	set_cmt	(0X8048C4D,	"ptr",	0);
	create_insn	(x=0X8048C55);
	op_hex		(x,	1);
	make_array	(0X8048C5A,	0X6);
	create_insn	(0X8048C60);
	set_name	(0X8048C60,	"skip_space");
	create_insn	(x=0X8048C64);
	op_hex		(x,	1);
	create_insn	(x=0X8048C75);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048C9F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CA7);
	op_hex		(x,	1);
	make_array	(0X8048CAD,	0X3);
	create_insn	(0X8048CB0);
	create_insn	(x=0X8048CB3);
	op_hex		(x,	1);
	create_insn	(x=0X8048CB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8048CBC,	"format",	0);
	create_insn	(x=0X8048CC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CC7);
	op_hex		(x,	1);
	make_array	(0X8048CCC,	0X4);
	create_insn	(0X8048CD0);
	set_name	(0X8048CD0,	"get_top");
	create_insn	(x=0X8048CD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X8048CE1,	0XF);
	create_insn	(0X8048CF0);
	set_name	(0X8048CF0,	"pop_stack");
	create_insn	(x=0X8048CF4);
	op_hex		(x,	1);
	create_insn	(x=0X8048D00);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8048D16,	"s",	0);
	set_cmt	(0X8048D23,	"status",	0);
	create_insn	(x=0X8048D2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D32);
	op_hex		(x,	1);
	create_insn	(x=0X8048D3F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048D45);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8048D5E,	"s",	0);
	set_cmt	(0X8048D61,	"format",	0);
	create_insn	(x=0X8048D72);
	op_stkvar	(x,	1);
	set_cmt	(0X8048D75,	"ptr",	0);
	create_insn	(x=0X8048D78);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D80);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DB5);
	op_hex		(x,	1);
	create_insn	(0X8048DBE);
	make_array	(0X8048DC3,	0XD);
	create_insn	(0X8048DD0);
	set_name	(0X8048DD0,	"push_stack");
	create_insn	(x=0X8048DD4);
	op_hex		(x,	1);
	create_insn	(x=0X8048DDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DE4);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DE7);
	op_hex		(x,	1);
	create_insn	(x=0X8048DEE);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DF7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048DFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E06);
	op_stkvar	(x,	1);
	set_cmt	(0X8048E0C,	"s",	0);
	set_cmt	(0X8048E0F,	"format",	0);
	create_insn	(x=0X8048E20);
	op_stkvar	(x,	1);
	set_cmt	(0X8048E23,	"s",	0);
	create_insn	(x=0X8048E26);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E41);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8048E47,	"s",	0);
	set_cmt	(0X8048E54,	"status",	0);
	create_insn	(x=0X8048E5B);
	op_stkvar	(x,	0);
	create_insn	(0X8048E63);
	create_insn	(x=0X8048E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E77);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E8F);
	op_hex		(x,	1);
	create_insn	(0X8048E98);
	make_array	(0X8048E9D,	0X3);
	create_insn	(0X8048EA0);
	set_name	(0X8048EA0,	"swap_num_unit");
	create_insn	(x=0X8048EA4);
	op_hex		(x,	1);
	create_insn	(x=0X8048EA7);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EB2);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EB5);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EBF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EC7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048ECA);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048ECD);
	op_hex		(x,	1);
	make_array	(0X8048ED3,	0XD);
	create_insn	(0X8048EE0);
	create_insn	(x=0X8048EE3);
	op_hex		(x,	1);
	create_insn	(0X8048F16);
	create_insn	(0X8048F4A);
	create_insn	(x=0X8048F4D);
	op_hex		(x,	1);
	make_array	(0X8048F52,	0XE);
	create_insn	(0X8048F60);
	set_name	(0X8048F60,	"plus");
	create_insn	(x=0X8048F66);
	op_hex		(x,	1);
	create_insn	(x=0X8048F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F79);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F84);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F99);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FA6);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FB0);
	op_stkvar	(x,	1);
	set_cmt	(0X8048FB6,	"s",	0);
	set_cmt	(0X8048FB9,	"c",	0);
	set_cmt	(0X8048FC1,	"n",	0);
	create_insn	(x=0X8048FC9);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FCF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FEC);
	op_stkvar	(x,	1);
	set_cmt	(0X8048FF2,	"s",	0);
	set_cmt	(0X8048FF5,	"format",	0);
	set_cmt	(0X8048FFD,	"n",	0);
	create_insn	(x=0X804900F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049015);
	op_stkvar	(x,	1);
	create_insn	(x=0X804901A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049020);
	op_hex		(x,	1);
	create_insn	(x=0X8049024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049027);
	op_hex		(x,	1);
	create_insn	(x=0X8049031);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049034);
	op_hex		(x,	1);
	create_insn	(x=0X804903E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049047);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049054);
	op_stkvar	(x,	0);
	create_insn	(x=0X804905A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049060);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049066);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049074);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049079);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8049080);
	op_stkvar	(x,	0);
	create_insn	(x=0X804908D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049095);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490D7);
	op_stkvar	(x,	1);
	set_cmt	(0X80490E1,	"s",	0);
	create_insn	(x=0X80490E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490F8);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049103);
	op_stkvar	(x,	1);
	create_insn	(x=0X804910B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049116);
	op_stkvar	(x,	1);
	create_insn	(x=0X804911C);
	op_stkvar	(x,	0);
	create_insn	(0X8049127);
	create_insn	(x=0X804912B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804912E);
	op_hex		(x,	1);
	create_insn	(x=0X8049132);
	op_stkvar	(x,	0);
	create_insn	(x=0X804913E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049144);
	op_stkvar	(x,	0);
	create_insn	(x=0X804914A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049154);
	op_hex		(x,	1);
	create_insn	(x=0X8049159);
	op_stkvar	(x,	1);
	create_insn	(x=0X804915C);
	op_hex		(x,	1);
	create_insn	(x=0X8049160);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049166);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049172);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049178);
	op_hex		(x,	1);
	create_insn	(x=0X804917B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049181);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049187);
	op_hex		(x,	1);
	create_insn	(x=0X804918C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804919D);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491AA);
	op_hex		(x,	1);
	create_insn	(x=0X80491B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491B7);
	op_stkvar	(x,	1);
	set_cmt	(0X80491BA,	"s",	0);
	set_cmt	(0X80491BD,	"format",	0);
	create_insn	(x=0X80491C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80491CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491F0);
	op_hex		(x,	1);
	create_insn	(x=0X80491F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049208);
	op_stkvar	(x,	1);
	create_insn	(x=0X804920E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049218);
	op_stkvar	(x,	0);
	create_insn	(x=0X804921E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049224);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049227);
	op_stkvar	(x,	1);
	create_insn	(x=0X804922D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804923D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8049249);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049250);
	op_stkvar	(x,	0);
	create_insn	(x=0X804925B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049267);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049276);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049280);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049283);
	op_stkvar	(x,	1);
	create_insn	(x=0X804928E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804929A);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492A0);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492AB);
	op_stkvar	(x,	1);
	set_cmt	(0X80492B1,	"dest",	0);
	create_insn	(x=0X80492B4);
	op_stkvar	(x,	1);
	set_cmt	(0X80492BA,	"src",	0);
	set_cmt	(0X80492BE,	"n",	0);
	create_insn	(x=0X80492C7);
	op_stkvar	(x,	1);
	create_insn	(x=0X80492CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X80492D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80492E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492EE);
	op_stkvar	(x,	0);
	create_insn	(x=0X80492FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049301);
	op_stkvar	(x,	1);
	create_insn	(x=0X804931D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049323);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049329);
	op_stkvar	(x,	1);
	create_insn	(x=0X804932F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804933D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049340);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049349);
	op_stkvar	(x,	1);
	create_insn	(x=0X804934F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049355);
	op_stkvar	(x,	0);
	create_insn	(x=0X804935C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049367);
	op_stkvar	(x,	0);
	create_insn	(x=0X804936D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049376);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049381);
	op_stkvar	(x,	0);
	create_insn	(x=0X804938E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804939E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80493A4,	"s",	0);
	set_cmt	(0X80493B1,	"status",	0);
	create_insn	(x=0X80493B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X80493C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X80493CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80493D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80493DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X80493E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X80493F0);
	op_stkvar	(x,	1);
	set_cmt	(0X80493F8,	"s",	0);
	create_insn	(x=0X8049400);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049409);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049412);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049420);
	op_stkvar	(x,	1);
	create_insn	(x=0X804942B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049431);
	op_stkvar	(x,	1);
	create_insn	(x=0X804943A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049440);
	op_stkvar	(x,	1);
	set_cmt	(0X8049448,	"s",	0);
	create_insn	(x=0X8049450);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049459);
	op_stkvar	(x,	1);
	create_insn	(x=0X804945F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804946A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804946D);
	op_hex		(x,	1);
	create_insn	(x=0X8049477);
	op_stkvar	(x,	1);
	create_insn	(x=0X804947A);
	op_hex		(x,	1);
	create_insn	(x=0X8049484);
	op_stkvar	(x,	1);
	create_insn	(x=0X804948E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049494);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494A3);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X80494C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X80494D3);
	op_stkvar	(x,	0);
	create_insn	(x=0X80494E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80494FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049511);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049526);
	op_stkvar	(x,	1);
	create_insn	(x=0X804952E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049534);
	op_stkvar	(x,	0);
	create_insn	(x=0X804953A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049540);
	op_stkvar	(x,	0);
	create_insn	(x=0X804954E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049551);
	op_stkvar	(x,	1);
	create_insn	(x=0X804955A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049560);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049567);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049572);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049578);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049581);
	op_stkvar	(x,	0);
	create_insn	(x=0X804958C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049595);
	op_stkvar	(x,	0);
	create_insn	(x=0X804959B);
	op_stkvar	(x,	0);
	create_insn	(x=0X80495A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495D0);
	op_stkvar	(x,	0);
	create_insn	(x=0X80495D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X80495EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80495FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049603);
	op_stkvar	(x,	1);
	create_insn	(x=0X804960E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049614);
	op_stkvar	(x,	1);
	create_insn	(x=0X804961D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049628);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049635);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049645);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804964B,	"s",	0);
	set_cmt	(0X8049658,	"status",	0);
	create_insn	(x=0X804965F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804966A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049675);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049680);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049691);
	op_stkvar	(x,	1);
	create_insn	(x=0X804969A);
	op_stkvar	(x,	1);
	set_cmt	(0X80496A5,	"s",	0);
	create_insn	(x=0X80496AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496D5);
	op_stkvar	(x,	1);
	set_cmt	(0X80496DD,	"s",	0);
	create_insn	(x=0X80496E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80496F4);
	op_stkvar	(x,	0);
	create_insn	(x=0X80496FF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049709);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049716);
	op_stkvar	(x,	1);
	create_insn	(x=0X804971B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049727);
	op_stkvar	(x,	1);
	create_insn	(x=0X804972D);
	op_hex		(x,	1);
	create_insn	(0X8049738);
	make_array	(0X804973D,	0X3);
	create_insn	(0X8049740);
	set_name	(0X8049740,	"minus");
	create_insn	(x=0X8049746);
	op_hex		(x,	1);
	create_insn	(x=0X804974C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804974F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049759);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049766);
	op_stkvar	(x,	0);
	set_cmt	(0X8049769,	"s",	0);
	set_cmt	(0X804976C,	"c",	0);
	set_cmt	(0X8049774,	"n",	0);
	create_insn	(x=0X804977C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049782);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049788);
	op_stkvar	(x,	0);
	create_insn	(x=0X804978E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804979E);
	op_stkvar	(x,	0);
	create_insn	(x=0X80497A4);
	op_stkvar	(x,	0);
	create_insn	(x=0X80497AE);
	op_stkvar	(x,	0);
	create_insn	(x=0X80497B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80497BB);
	op_hex		(x,	1);
	create_insn	(x=0X80497C5);
	op_stkvar	(x,	1);
	create_insn	(x=0X80497C8);
	op_hex		(x,	1);
	create_insn	(x=0X80497D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80497D5);
	op_hex		(x,	1);
	create_insn	(x=0X80497DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80497E1);
	op_stkvar	(x,	1);
	set_cmt	(0X80497E4,	"s",	0);
	set_cmt	(0X80497E7,	"format",	0);
	create_insn	(x=0X80497F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80497F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049806);
	op_stkvar	(x,	0);
	create_insn	(x=0X804980C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049812);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049825);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804982B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049834);
	op_stkvar	(x,	1);
	create_insn	(x=0X804983A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049848);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049854);
	op_stkvar	(x,	1);
	create_insn	(x=0X804985A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049860);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049874);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804987B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049886);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049890);
	op_stkvar	(x,	0);
	create_insn	(x=0X804989B);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80498CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X80498D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X80498EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X80498FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049908);
	op_stkvar	(x,	1);
	create_insn	(x=0X804990E);
	op_stkvar	(x,	0);
	create_insn	(0X8049919);
	create_insn	(x=0X804991D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049920);
	op_hex		(x,	1);
	create_insn	(x=0X8049924);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049930);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049936);
	op_stkvar	(x,	0);
	create_insn	(x=0X804993C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049946);
	op_hex		(x,	1);
	create_insn	(x=0X804994B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804994E);
	op_hex		(x,	1);
	create_insn	(x=0X8049952);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049958);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049964);
	op_stkvar	(x,	1);
	create_insn	(x=0X804996A);
	op_hex		(x,	1);
	create_insn	(x=0X804996D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049973);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049979);
	op_hex		(x,	1);
	create_insn	(x=0X804997E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804998F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049992);
	op_hex		(x,	1);
	create_insn	(x=0X804999C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804999F);
	op_stkvar	(x,	1);
	set_cmt	(0X80499A2,	"s",	0);
	set_cmt	(0X80499A5,	"format",	0);
	create_insn	(x=0X80499AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499B9);
	op_hex		(x,	1);
	create_insn	(x=0X80499BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X80499EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80499F6);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A03);
	op_hex		(x,	1);
	create_insn	(x=0X8049A06);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A0C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A31);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A42);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A4C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A55);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A64);
	op_hex		(x,	1);
	create_insn	(x=0X8049A67);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A6D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A73);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8049A79);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A85);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049A92);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A98);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049A9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8049AC7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049AE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049AE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049AED);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049AFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B07);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B28);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B32);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B41);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B47);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B59);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B65);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B85);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B8B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049B92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049B9B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049BA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049BB1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049BB9);
	op_stkvar	(x,	1);
	set_cmt	(0X8049BBF,	"s",	0);
	set_cmt	(0X8049BC2,	"a2",	0);
	create_insn	(x=0X8049BCB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049BD1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049BE9);
	op_stkvar	(x,	1);
	set_cmt	(0X8049BEF,	"s",	0);
	create_insn	(x=0X8049C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C0C);
	op_stkvar	(x,	1);
	set_cmt	(0X8049C12,	"s",	0);
	create_insn	(x=0X8049C1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C23);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C51);
	op_hex		(x,	1);
	create_insn	(x=0X8049C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049C89);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C8C);
	op_hex		(x,	1);
	create_insn	(x=0X8049C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049C99);
	op_hex		(x,	1);
	create_insn	(x=0X8049CA3);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CA9);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CBB);
	op_hex		(x,	1);
	create_insn	(x=0X8049CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CCB);
	op_stkvar	(x,	1);
	set_cmt	(0X8049CCE,	"a1",	0);
	set_cmt	(0X8049CD1,	"a2",	0);
	create_insn	(x=0X8049CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CE5);
	op_hex		(x,	1);
	create_insn	(x=0X8049CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049CF6);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D05);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049D0B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D4F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D89);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049D9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049DA7);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DB5);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049DBB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049DFB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E14);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E1A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E29);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E40);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E47);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E50);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E64);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E77);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049E8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049EA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049EAF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049EDC);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049EE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049EF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F08);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049F0F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F18);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049F23);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F36);
	op_stkvar	(x,	1);
	set_cmt	(0X8049F3C,	"s",	0);
	set_cmt	(0X8049F3F,	"a2",	0);
	create_insn	(x=0X8049F48);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F5D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F66);
	op_stkvar	(x,	1);
	set_cmt	(0X8049F6C,	"s",	0);
	create_insn	(x=0X8049F7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049F89);
	op_stkvar	(x,	1);
	set_cmt	(0X8049F8F,	"s",	0);
	create_insn	(x=0X8049F97);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FBD);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FCE);
	op_hex		(x,	1);
	create_insn	(x=0X8049FD1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FDD);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049FFB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A006);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A010);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A01D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A022);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A034);
	op_hex		(x,	1);
	create_insn	(0X804A03F);
	make_array	(0X804A044,	0XC);
	create_insn	(0X804A050);
	set_name	(0X804A050,	"strip_line");
	create_insn	(x=0X804A053);
	op_hex		(x,	1);
	create_insn	(x=0X804A056);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A059);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A060);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A063);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A066);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A076);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A079);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A089);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A098);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A09E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A0A6);
	op_hex		(x,	1);
	make_array	(0X804A0AB,	0X5);
	create_insn	(0X804A0B0);
	set_name	(0X804A0B0,	"multiple");
	create_insn	(x=0X804A0B6);
	op_hex		(x,	1);
	create_insn	(x=0X804A0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A0BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A0C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A0CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A0D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A0EA);
	op_stkvar	(x,	0);
	set_cmt	(0X804A0F0,	"s",	0);
	set_cmt	(0X804A0F3,	"format",	0);
	set_cmt	(0X804A0FB,	"n",	0);
	create_insn	(x=0X804A103);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A109);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A114);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A11A);
	op_hex		(x,	1);
	create_insn	(x=0X804A120);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A126);
	op_hex		(x,	1);
	create_insn	(x=0X804A137);
	op_hex		(x,	1);
	create_insn	(x=0X804A144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A151,	"s",	0);
	create_insn	(x=0X804A159);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A164,	"format",	0);
	create_insn	(x=0X804A173);
	op_stkvar	(x,	0);
	set_cmt	(0X804A189,	"nmemb",	0);
	set_cmt	(0X804A190,	"size",	0);
	create_insn	(x=0X804A198);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A19E);
	op_stkvar	(x,	0);
	set_cmt	(0X804A1BB,	"fd",	0);
	set_cmt	(0X804A1C2,	"buf",	0);
	set_cmt	(0X804A1C6,	"nbytes",	0);
	create_insn	(x=0X804A1CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A1D4);
	op_stkvar	(x,	0);
	set_cmt	(0X804A1E5,	"a1",	0);
	create_insn	(x=0X804A1E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A1F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A1F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A204);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A20D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A21B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A227);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A232);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A238);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A23E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A243);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A250);
	op_hex		(x,	1);
	create_insn	(x=0X804A255);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A25B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A269);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A271);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A278);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A285);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A28D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A298);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2B5);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A2BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2D2);
	op_stkvar	(x,	1);
	set_cmt	(0X804A2DC,	"s",	0);
	create_insn	(x=0X804A2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A2FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A305);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A30B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A311);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A323);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A32F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A335);
	op_hex		(x,	1);
	create_insn	(0X804A340);
	make_array	(0X804A345,	0XB);
	create_insn	(0X804A350);
	create_insn	(x=0X804A356);
	op_hex		(x,	1);
	create_insn	(x=0X804A35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A35F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A369);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A36C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A36F);
	op_hex		(x,	1);
	create_insn	(x=0X804A373);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A379);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A385);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A38B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A391);
	op_stkvar	(x,	1);
	set_cmt	(0X804A397,	"s",	0);
	set_cmt	(0X804A39A,	"format",	0);
	create_insn	(x=0X804A3A7);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A3B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A3BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A3D1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A3D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A3E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A3E9);
	op_hex		(x,	1);
	create_insn	(x=0X804A3F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A402);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A408);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A41F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804A425);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A430);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A436);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A44D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A458);
	op_hex		(x,	1);
	create_insn	(0X804A463);
	make_array	(0X804A468,	0X8);
	create_insn	(0X804A470);
	set_name	(0X804A470,	"division");
	create_insn	(x=0X804A474);
	op_hex		(x,	1);
	create_insn	(x=0X804A477);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A47A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A47D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A480);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A488);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A48B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A492);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A499);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A49C);
	op_hex		(x,	1);
	create_insn	(x=0X804A4A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A4BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4C2);
	op_stkvar	(x,	1);
	set_cmt	(0X804A4C5,	"a1",	0);
	set_cmt	(0X804A4C8,	"a2",	0);
	create_insn	(x=0X804A4D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4D4);
	op_hex		(x,	1);
	create_insn	(x=0X804A4DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4E1);
	op_hex		(x,	1);
	create_insn	(x=0X804A4EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4EE);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A4F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A4F9);
	op_hex		(x,	1);
	create_insn	(x=0X804A503);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A506);
	op_hex		(x,	1);
	create_insn	(x=0X804A510);
	op_hex		(x,	1);
	create_insn	(x=0X804A51D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A52A,	"s",	0);
	create_insn	(x=0X804A532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A53D,	"format",	0);
	create_insn	(x=0X804A54C);
	op_stkvar	(x,	0);
	set_cmt	(0X804A55F,	"nmemb",	0);
	set_cmt	(0X804A566,	"size",	0);
	create_insn	(x=0X804A56E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A571);
	op_stkvar	(x,	0);
	set_cmt	(0X804A58B,	"fd",	0);
	set_cmt	(0X804A592,	"buf",	0);
	set_cmt	(0X804A596,	"nbytes",	0);
	create_insn	(x=0X804A59E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A5A1);
	op_stkvar	(x,	0);
	set_cmt	(0X804A5AF,	"a1",	0);
	create_insn	(x=0X804A5B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A5BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A5C5);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5D4);
	op_hex		(x,	1);
	create_insn	(x=0X804A5D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A5EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5F0);
	op_hex		(x,	1);
	create_insn	(x=0X804A5F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A5FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A606);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A610);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A613);
	op_stkvar	(x,	0);
	create_insn	(0X804A61B);
	create_insn	(x=0X804A620);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A62F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A632);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A638);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A63D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A640);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A646);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A64E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A651);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A657);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A65A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A65D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A660);
	op_hex		(x,	1);
	make_array	(0X804A666,	0XA);
	create_insn	(0X804A670);
	set_name	(0X804A670,	"parse_num_unit");
	create_insn	(x=0X804A675);
	op_hex		(x,	1);
	create_insn	(x=0X804A682);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A68F);
	op_stkvar	(x,	0);
	set_cmt	(0X804A692,	"s",	0);
	set_cmt	(0X804A695,	"c",	0);
	set_cmt	(0X804A69D,	"n",	0);
	create_insn	(x=0X804A6A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6AB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6C5);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6D0);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A6EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A6FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A70C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A712,	"s",	0);
	set_cmt	(0X804A71F,	"status",	0);
	create_insn	(x=0X804A726);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A731);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A746);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A74C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A75D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A77D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A785);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A78D);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A799);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A7A1);
	op_hex		(x,	1);
	create_insn	(x=0X804A7A8);
	op_stkvar	(x,	1);
	create_insn	(0X804A7B9);
	create_insn	(x=0X804A7CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A7D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A7E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A7E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A7EF);
	op_hex		(x,	1);
	create_insn	(x=0X804A7F9);
	op_stkvar	(x,	1);
	set_cmt	(0X804A7FF,	"s",	0);
	create_insn	(x=0X804A807);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A810);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A81F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A828);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A835);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A83A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A846);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A84C);
	op_hex		(x,	1);
	create_insn	(0X804A856);
	make_array	(0X804A85B,	0X5);
	create_insn	(0X804A860);
	set_name	(0X804A860,	"get_op");
	create_insn	(x=0X804A863);
	op_hex		(x,	1);
	create_insn	(x=0X804A866);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A86B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A86E);
	op_stkvar	(x,	0);
	set_cmt	(0X804A880,	"switch 48 cases ",	0);
	create_insn	(x=0X804A883);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A886);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A88F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A892);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A899,	"switch jump",	0);
	set_cmt	(0X804A89B,	"jumptable 0804A899 case 43",	1);
	create_insn	(0X804A89B);
	create_insn	(x=0X804A8AF);
	op_stkvar	(x,	1);
	set_cmt	(0X804A8B2,	"a1",	0);
	set_cmt	(0X804A8B5,	"a2",	0);
	set_cmt	(0X804A8BD,	"a3",	0);
	create_insn	(x=0X804A8C5);
	op_stkvar	(x,	0);
	set_cmt	(0X804A8D2,	"jumptable 0804A899 case 45",	1);
	create_insn	(0X804A8D2);
	create_insn	(x=0X804A8EB);
	op_stkvar	(x,	1);
	set_cmt	(0X804A8EE,	"a1",	0);
	set_cmt	(0X804A8F1,	"a2",	0);
	set_cmt	(0X804A8F9,	"a3",	0);
	create_insn	(x=0X804A901);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A904);
	op_stkvar	(x,	0);
	set_cmt	(0X804A911,	"jumptable 0804A899 case 42",	1);
	create_insn	(0X804A911);
	create_insn	(x=0X804A92A);
	op_stkvar	(x,	1);
	set_cmt	(0X804A92D,	"a1",	0);
	set_cmt	(0X804A930,	"a2",	0);
	set_cmt	(0X804A938,	"a3",	0);
	create_insn	(x=0X804A940);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A943);
	op_stkvar	(x,	0);
	set_cmt	(0X804A950,	"jumptable 0804A899 case 47",	1);
	create_insn	(0X804A950);
	create_insn	(x=0X804A969);
	op_stkvar	(x,	1);
	set_cmt	(0X804A96C,	"a1",	0);
	set_cmt	(0X804A96F,	"a2",	0);
	set_cmt	(0X804A977,	"a3",	0);
	create_insn	(x=0X804A97F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A982);
	op_stkvar	(x,	0);
	set_cmt	(0X804A98F,	"jumptable 0804A899 cases 0,41",	1);
	create_insn	(0X804A98F);
	create_insn	(x=0X804A991);
	op_stkvar	(x,	1);
	set_cmt	(0X804A994,	"a1",	0);
	set_cmt	(0X804A997,	"a2",	0);
	set_cmt	(0X804A99F,	"a3",	0);
	create_insn	(x=0X804A9A7);
	op_stkvar	(x,	0);
	set_cmt	(0X804A9B4,	"jumptable 0804A899 default case, cases 1-40,44,46",	1);
	create_insn	(x=0X804A9B4);
	op_hex		(x,	1);
	set_name	(0X804A9B4,	"def_804A899");
	create_insn	(x=0X804A9C1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804A9C7,	"s",	0);
	create_insn	(x=0X804A9DD);
	op_stkvar	(x,	1);
	set_cmt	(0X804A9E0,	"a1",	0);
	set_cmt	(0X804A9E3,	"a2",	0);
	set_cmt	(0X804A9EB,	"a3",	0);
	create_insn	(x=0X804A9F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804A9FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X804A9FE);
	op_hex		(x,	1);
	make_array	(0X804AA05,	0XB);
	create_insn	(0X804AA10);
	set_name	(0X804AA10,	"do_by_op");
	create_insn	(x=0X804AA14);
	op_hex		(x,	1);
	create_insn	(x=0X804AA17);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA1D);
	op_stkvar	(x,	1);
	set_cmt	(0X804AA22,	"switch 4 cases ",	0);
	create_insn	(x=0X804AA28);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AA2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AA2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AA31);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AA3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA3D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804AA44,	"switch jump",	0);
	set_cmt	(0X804AA46,	"jumptable 0804AA44 case 1",	1);
	create_insn	(x=0X804AA46);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA4B);
	op_hex		(x,	1);
	create_insn	(x=0X804AA51);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA56);
	op_hex		(x,	1);
	create_insn	(x=0X804AA67);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA6A);
	op_stkvar	(x,	1);
	set_cmt	(0X804AA6D,	"nptr",	0);
	set_cmt	(0X804AA70,	"format",	0);
	create_insn	(x=0X804AA79);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AA81);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AA84);
	op_stkvar	(x,	1);
	set_cmt	(0X804AA87,	"dest",	0);
	set_cmt	(0X804AA8A,	"format",	0);
	create_insn	(x=0X804AA93);
	op_stkvar	(x,	0);
	set_cmt	(0X804AA9B,	"jumptable 0804AA44 case 2",	1);
	create_insn	(x=0X804AA9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AAA0);
	op_hex		(x,	1);
	create_insn	(x=0X804AAA6);
	op_hex		(x,	1);
	create_insn	(x=0X804AAAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AAB2);
	op_hex		(x,	1);
	create_insn	(x=0X804AAB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AABC);
	op_hex		(x,	1);
	create_insn	(x=0X804AAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AAC7);
	op_hex		(x,	1);
	create_insn	(x=0X804AAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AADB);
	op_stkvar	(x,	1);
	set_cmt	(0X804AADE,	"nptr",	0);
	set_cmt	(0X804AAE1,	"format",	0);
	create_insn	(x=0X804AAEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AAF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AAF5);
	op_stkvar	(x,	1);
	set_cmt	(0X804AAF8,	"dest",	0);
	set_cmt	(0X804AAFB,	"format",	0);
	create_insn	(x=0X804AB04);
	op_stkvar	(x,	0);
	set_cmt	(0X804AB0C,	"jumptable 0804AA44 case 3",	1);
	create_insn	(x=0X804AB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AB0F);
	op_stkvar	(x,	1);
	set_cmt	(0X804AB12,	"a1",	0);
	set_cmt	(0X804AB15,	"a2",	0);
	create_insn	(x=0X804AB1E);
	op_stkvar	(x,	0);
	set_cmt	(0X804AB26,	"jumptable 0804AA44 case 4",	1);
	create_insn	(x=0X804AB26);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AB29);
	op_stkvar	(x,	1);
	set_cmt	(0X804AB2C,	"a1",	0);
	set_cmt	(0X804AB2F,	"a2",	0);
	create_insn	(x=0X804AB38);
	op_stkvar	(x,	0);
	set_cmt	(0X804AB40,	"jumptable 0804AA44 default case",	1);
	create_insn	(0X804AB40);
	set_name	(0X804AB40,	"def_804AA44");
	create_insn	(x=0X804AB45);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AB48);
	op_stkvar	(x,	1);
	set_cmt	(0X804AB4B,	"a1",	0);
	create_insn	(x=0X804AB53);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AB56);
	op_hex		(x,	1);
	make_array	(0X804AB5C,	0X4);
	create_insn	(0X804AB60);
	set_name	(0X804AB60,	"parase_line");
	create_insn	(x=0X804AB63);
	op_hex		(x,	1);
	create_insn	(x=0X804AB66);
	op_stkvar	(x,	1);
	set_cmt	(0X804AB6B,	"a1",	0);
	set_cmt	(0X804AB6E,	"a2",	0);
	set_cmt	(0X804AB76,	"a3",	0);
	create_insn	(x=0X804AB7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AB8B);
	op_stkvar	(x,	1);
	set_cmt	(0X804AB90,	"a1",	0);
	set_cmt	(0X804AB96,	"a2",	0);
	set_cmt	(0X804AB9A,	"a3",	0);
	create_insn	(x=0X804ABA3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ABA6);
	op_stkvar	(x,	1);
	set_cmt	(0X804ABA9,	"a1",	0);
	create_insn	(x=0X804ABB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ABC6);
	op_stkvar	(x,	1);
	set_cmt	(0X804ABC9,	"a1",	0);
	create_insn	(x=0X804ABD1);
	op_hex		(x,	1);
	create_insn	(x=0X804ABD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804ABD7);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ABE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804ABFF);
	op_hex		(x,	1);
	create_insn	(0X804AC0C);
	create_insn	(x=0X804AC11);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC14);
	op_stkvar	(x,	0);
	create_insn	(0X804AC1C);
	create_insn	(x=0X804AC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC27);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC37);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC40);
	op_stkvar	(x,	1);
	set_cmt	(0X804AC43,	"nptr",	0);
	create_insn	(x=0X804AC46);
	op_stkvar	(x,	1);
	set_cmt	(0X804AC49,	"format",	0);
	set_cmt	(0X804AC4F,	"char",	0);
	create_insn	(x=0X804AC5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC72);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC75);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AC78);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC7B);
	op_stkvar	(x,	1);
	set_cmt	(0X804AC80,	"a1",	0);
	set_cmt	(0X804AC86,	"a2",	0);
	set_cmt	(0X804AC8A,	"a3",	0);
	create_insn	(x=0X804AC93);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AC96);
	op_stkvar	(x,	1);
	set_cmt	(0X804AC99,	"a1",	0);
	create_insn	(x=0X804ACA6);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ACAE);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ACB5);
	op_stkvar	(x,	1);
	create_insn	(x=0X804ACB8);
	op_hex		(x,	1);
	make_array	(0X804ACBD,	0X3);
	create_insn	(0X804ACC0);
	set_name	(0X804ACC0,	"continue_parse");
	create_insn	(x=0X804ACC3);
	op_hex		(x,	1);
	set_cmt	(0X804ACD3,	"switch 18 cases ",	0);
	create_insn	(x=0X804ACDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ACDE);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ACE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804ACEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804ACF1,	"switch jump",	0);
	set_cmt	(0X804ACF3,	"jumptable 0804ACF1 cases 48-57",	1);
	create_insn	(0X804ACF3);
	create_insn	(x=0X804ACF8);
	op_stkvar	(x,	0);
	set_cmt	(0X804AD00,	"jumptable 0804ACF1 case 40",	1);
	create_insn	(0X804AD00);
	create_insn	(x=0X804AD12);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AD2B);
	op_hex		(x,	1);
	create_insn	(x=0X804AD38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804AD3E,	"s",	0);
	create_insn	(0X804AD57);
	set_cmt	(0X804AD69,	"jumptable 0804ACF1 case 43",	1);
	create_insn	(0X804AD69);
	create_insn	(x=0X804AD7B);
	op_stkvar	(x,	0);
	set_cmt	(0X804AD83,	"jumptable 0804ACF1 case 45",	1);
	create_insn	(0X804AD83);
	create_insn	(x=0X804AD95);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AD9D);
	op_hex		(x,	1);
	create_insn	(x=0X804ADA3);
	op_hex		(x,	1);
	create_insn	(x=0X804ADAC);
	op_hex		(x,	1);
	set_cmt	(0X804ADB6,	"jumptable 0804ACF1 default case, cases 41,42,44,46,47",	1);
	create_insn	(x=0X804ADB6);
	op_hex		(x,	1);
	set_name	(0X804ADB6,	"def_804ACF1");
	create_insn	(x=0X804ADC3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804ADC9,	"s",	0);
	create_insn	(x=0X804ADE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X804ADE5);
	op_stkvar	(x,	1);
	create_insn	(x=0X804ADE8);
	op_hex		(x,	1);
	make_array	(0X804ADED,	0X3);
	create_insn	(0X804ADF0);
	set_name	(0X804ADF0,	"calc");
	create_insn	(x=0X804ADF4);
	op_hex		(x,	1);
	create_insn	(x=0X804ADF7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804AE04);
	op_stkvar	(x,	0);
	set_cmt	(0X804AE07,	"s",	0);
	create_insn	(x=0X804AE0F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804AE15,	"s",	0);
	create_insn	(x=0X804AE18);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE20);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE23);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804AE29,	"format",	0);
	set_cmt	(0X804AE3E,	"fd",	0);
	set_cmt	(0X804AE45,	"buf",	0);
	set_cmt	(0X804AE49,	"nbytes",	0);
	create_insn	(x=0X804AE51);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE54);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE57);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE5F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804AE6A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AE72);
	op_stkvar	(x,	1);
	set_cmt	(0X804AE81,	"format",	0);
	set_cmt	(0X804AE84,	"s2",	0);
	set_cmt	(0X804AE88,	"n",	0);
	create_insn	(x=0X804AE90);
	op_stkvar	(x,	0);
	create_insn	(0X804AEA6);
	create_insn	(x=0X804AEAB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AEAE);
	op_hex		(x,	1);
	set_cmt	(0X804AEC0,	"s",	0);
	set_cmt	(0X804AECE,	"ptr",	0);
	create_insn	(x=0X804AED1);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AEEF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AEF2);
	op_hex		(x,	1);
	create_insn	(x=0X804AF01);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AF07);
	op_stkvar	(x,	1);
	set_cmt	(0X804AF0D,	"fd",	0);
	set_cmt	(0X804AF14,	"buf",	0);
	set_cmt	(0X804AF18,	"n",	0);
	create_insn	(x=0X804AF1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AF24);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AF2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804AF32);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AF43);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804AF49);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AF51);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AF59);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AF64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804AF6A,	"s",	0);
	create_insn	(x=0X804AF7C);
	op_stkvar	(x,	0);
	create_insn	(0X804AF84);
	create_insn	(x=0X804AF8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804AF95);
	op_hex		(x,	1);
	create_insn	(0X804AF9B);
	create_insn	(0X804AFA0);
	set_name	(0X804AFA0,	"main");
	create_insn	(x=0X804AFA4);
	op_hex		(x,	1);
	create_insn	(x=0X804AFB8);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AFBB);
	op_stkvar	(x,	0);
	set_cmt	(0X804AFC8,	"stream",	0);
	set_cmt	(0X804AFCB,	"buf",	0);
	set_cmt	(0X804AFD3,	"modes",	0);
	set_cmt	(0X804AFDB,	"n",	0);
	create_insn	(x=0X804AFE3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804AFE6);
	op_stkvar	(x,	0);
	set_cmt	(0X804AFFB,	"stream",	0);
	set_cmt	(0X804AFFE,	"buf",	0);
	set_cmt	(0X804B006,	"modes",	0);
	set_cmt	(0X804B00E,	"n",	0);
	create_insn	(x=0X804B016);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B019);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B01C);
	op_stkvar	(x,	0);
	set_cmt	(0X804B029,	"size",	0);
	create_insn	(x=0X804B030);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B033);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B052);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B058);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804B05E,	"filename",	0);
	set_cmt	(0X804B061,	"modes",	0);
	create_insn	(x=0X804B06A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B06D);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B077);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804B07D,	"s",	0);
	set_cmt	(0X804B08A,	"status",	0);
	create_insn	(x=0X804B091);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B094);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B09C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B0A2);
	op_stkvar	(x,	1);
	set_cmt	(0X804B0AB,	"s",	0);
	set_cmt	(0X804B0AE,	"format",	0);
	create_insn	(x=0X804B0BB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B0C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B0C4);
	op_stkvar	(x,	1);
	set_cmt	(0X804B0C7,	"stream",	0);
	set_cmt	(0X804B0CA,	"format",	0);
	create_insn	(x=0X804B0D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B0DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X804B0E0,	"format",	0);
	create_insn	(x=0X804B0E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B0EB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B0F1);
	op_stkvar	(x,	1);
	set_cmt	(0X804B0F4,	"format",	0);
	create_insn	(x=0X804B0FB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B103);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B109);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B10C);
	op_stkvar	(x,	1);
	set_cmt	(0X804B10F,	"stream",	0);
	set_cmt	(0X804B112,	"format",	0);
	create_insn	(x=0X804B11A);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B125);
	op_stkvar	(x,	1);
	set_cmt	(0X804B128,	"s",	0);
	create_insn	(x=0X804B12B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B136);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B13E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X804B150);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B155);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B166);
	op_hex		(x,	1);
	create_insn	(0X804B16F);
	make_array	(0X804B174,	0XC);
	create_insn	(0X804B180);
	set_name	(0X804B180,	"init_sig");
	create_insn	(x=0X804B185);
	op_hex		(x,	1);
	create_insn	(x=0X804B188);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B18B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B18E);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B191);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B194);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B199);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B19F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B1A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B1A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B1A8);
	op_hex		(x,	1);
	create_insn	(0X804B1B0);
	set_name	(0X804B1B0,	"get_op_priority");
	create_insn	(x=0X804B1B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B1C2);
	op_hex		(x,	1);
	make_array	(0X804B1C7,	0X9);
	create_insn	(0X804B1D0);
	set_name	(0X804B1D0,	"get_unit_num");
	create_insn	(x=0X804B1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1E0);
	op_hex		(x,	1);
	create_insn	(x=0X804B1E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B1EB);
	op_hex		(x,	1);
	create_insn	(0X804B1F0);
	create_insn	(x=0X804B1F4);
	op_hex		(x,	1);
	create_insn	(x=0X804B1F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B1FF);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B209);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B20C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B212);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B216);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B21C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B21F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B227);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B22C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B230);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B23E);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B24D);
	op_stkvar	(x,	1);
	create_insn	(0X804B260);
	create_insn	(x=0X804B26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B27B);
	op_hex		(x,	1);
	make_array	(0X804B283,	0X5);
	create_insn	(0X804B288);
	create_insn	(x=0X804B28B);
	op_hex		(x,	1);
	create_insn	(x=0X804B296);
	op_stkvar	(x,	1);
	make_array	(0X804B2A2,	0X6);
	create_insn	(0X804B2A8);
	create_insn	(x=0X804B2BF);
	op_stkvar	(x,	1);
	make_array	(0X804B2C8,	0X8);
	create_insn	(0X804B2D0);
	create_insn	(x=0X804B2EB);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B2EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B302);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B310);
	op_stkvar	(x,	1);
	make_array	(0X804B328,	0X8);
	create_insn	(0X804B330);
	make_array	(0X804B33A,	0X6);
	create_insn	(0X804B340);
	set_name	(0X804B340,	"init");
	create_insn	(x=0X804B34F);
	op_hex		(x,	1);
	create_insn	(x=0X804B352);
	op_stkvar	(x,	1);
	create_insn	(x=0X804B356);
	op_plain_offset	(x,	1,	0X804D000);
	op_plain_offset	(x,	129,	0X804D000);
	create_insn	(x=0X804B361);
	op_plain_offset	(x,	1,	0X804D000);
	op_plain_offset	(x,	129,	0X804D000);
	create_insn	(x=0X804B369);
	op_hex		(x,	1);
	create_insn	(x=0X804B378);
	op_hex		(x,	1);
	create_insn	(x=0X804B37B);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B37F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804B384);
	op_plain_offset	(x,	0,	0X804D000);
	op_plain_offset	(x,	128,	0X804D000);
	create_insn	(x=0X804B38E);
	op_hex		(x,	1);
	create_insn	(x=0X804B395);
	op_hex		(x,	1);
	make_array	(0X804B39D,	0X3);
	create_insn	(0X804B3A0);
	set_name	(0X804B3A0,	"fini");
	make_array	(0X804B3A2,	0X2);
	create_insn	(0X804B3A4);
	set_name	(0X804B3A4,	".term_proc");
	create_insn	(x=0X804B3A5);
	op_hex		(x,	1);
	create_insn	(x=0X804B3B3);
	op_hex		(x,	1);
	set_name	(0X804B3BC,	"_IO_stdin_used");
	set_cmt	(0X804B3C0,	"jump table for switch statement",	0);
	create_dword	(x=0X804B3C0);
	make_array	(x,	0X30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804B3C0,	"jpt_804A899");
	set_cmt	(0X804B480,	"jump table for switch statement",	0);
	create_dword	(x=0X804B480);
	make_array	(x,	0X4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804B480,	"jpt_804AA44");
	set_cmt	(0X804B490,	"jump table for switch statement",	0);
	create_dword	(x=0X804B490);
	make_array	(x,	0X12);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804B490,	"jpt_804ACF1");
	create_strlit	(0X804B4D8,	0X804B4EC);
	set_name	(0X804B4D8,	"format");
	create_strlit	(0X804B4EC,	0X804B4F8);
	set_name	(0X804B4EC,	"aUnexpected");
	create_strlit	(0X804B4F8,	0X804B507);
	set_name	(0X804B4F8,	"s");
	create_strlit	(0X804B507,	0X804B52E);
	set_name	(0X804B507,	"aPopCurrentSpDO");
	create_strlit	(0X804B52E,	0X804B556);
	set_name	(0X804B52E,	"aPushCurrentSpD");
	create_strlit	(0X804B556,	0X804B569);
	set_name	(0X804B556,	"aStackkkkkOverf");
	create_strlit	(0X804B569,	0X804B56E);
	set_name	(0X804B569,	"aLld");
	create_strlit	(0X804B56E,	0X804B584);
	set_name	(0X804B56E,	"aOverflowNahNah");
	create_strlit	(0X804B584,	0X804B5F4);
	set_name	(0X804B584,	"aSorryWeHavenTS");
	create_strlit	(0X804B5F4,	0X804B623);
	set_name	(0X804B5F4,	"aCanTCalculateS");
	create_strlit	(0X804B623,	0X804B693);
	set_name	(0X804B623,	"aSorryWeHavenTS_0");
	create_strlit	(0X804B693,	0X804B6A7);
	set_name	(0X804B693,	"aYourNumberTooB");
	create_strlit	(0X804B6A7,	0X804B6C1);
	set_name	(0X804B6A7,	"aInvalidSyntaxO");
	create_strlit	(0X804B6C1,	0X804B6D2);
	set_name	(0X804B6C1,	"aInvalidSyntax");
	create_strlit	(0X804B6D2,	0X804B6F4);
	set_name	(0X804B6D2,	"aWelcomeToMeepw");
	create_strlit	(0X804B6F4,	0X804B756);
	set_name	(0X804B6F4,	"aInputSomething");
	create_strlit	(0X804B756,	0X804B75F);
	set_name	(0X804B756,	"aInput");
	create_strlit	(0X804B75F,	0X804B764);
	set_name	(0X804B75F,	"s2");
	create_strlit	(0X804B764,	0X804B76E);
	set_name	(0X804B764,	"filename");
	create_strlit	(0X804B76E,	0X804B770);
	set_name	(0X804B76E,	"modes");
	create_strlit	(0X804B770,	0X804B780);
	set_name	(0X804B770,	"aOpenFileError");
	create_strlit	(0X804B780,	0X804B791);
	set_name	(0X804B780,	"aContactInfoS");
	create_strlit	(0X804B791,	0X804B7C0);
	set_name	(0X804B791,	"aTellMeTheModul");
	create_strlit	(0X804B7C0,	0X804B7C5);
	set_name	(0X804B7C0,	"a64s");
	create_strlit	(0X804B7C5,	0X804B7ED);
	set_name	(0X804B7C5,	"aThanksYouForPl");
	make_array	(0X804B7ED,	0X3);
	update_extra_cmt		(0X804CF0C,	E_PREV + 0,	"; ELF Initialization Function Table");
	create_dword	(x=0X804CF0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804CF0C,	"funcs_804B384");
	update_extra_cmt		(0X804CF10,	E_PREV + 0,	"; ELF Termination Function Table");
	create_dword	(x=0X804CF10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X804CF14,	"DT_NEEDED libc.so.6",	0);
	update_extra_cmt		(0X804CF14,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X804CF14,	"Elf32_Dyn");
	set_cmt	(0X804CF1C,	"DT_INIT ",	0);
	MakeStruct	(0X804CF1C,	"Elf32_Dyn");
	set_cmt	(0X804CF24,	"DT_FINI ",	0);
	MakeStruct	(0X804CF24,	"Elf32_Dyn");
	set_cmt	(0X804CF2C,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X804CF2C,	"Elf32_Dyn");
	set_cmt	(0X804CF34,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X804CF34,	"Elf32_Dyn");
	set_cmt	(0X804CF3C,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X804CF3C,	"Elf32_Dyn");
	set_cmt	(0X804CF44,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X804CF44,	"Elf32_Dyn");
	set_cmt	(0X804CF4C,	"DT_GNU_HASH ",	0);
	MakeStruct	(0X804CF4C,	"Elf32_Dyn");
	set_cmt	(0X804CF54,	"DT_STRTAB ",	0);
	MakeStruct	(0X804CF54,	"Elf32_Dyn");
	set_cmt	(0X804CF5C,	"DT_SYMTAB ",	0);
	MakeStruct	(0X804CF5C,	"Elf32_Dyn");
	set_cmt	(0X804CF64,	"DT_STRSZ ",	0);
	MakeStruct	(0X804CF64,	"Elf32_Dyn");
	set_cmt	(0X804CF6C,	"DT_SYMENT ",	0);
	MakeStruct	(0X804CF6C,	"Elf32_Dyn");
	set_cmt	(0X804CF74,	"DT_DEBUG ",	0);
	MakeStruct	(0X804CF74,	"Elf32_Dyn");
	set_cmt	(0X804CF7C,	"DT_PLTGOT ",	0);
	MakeStruct	(0X804CF7C,	"Elf32_Dyn");
	set_cmt	(0X804CF84,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X804CF84,	"Elf32_Dyn");
	set_cmt	(0X804CF8C,	"DT_PLTREL ",	0);
	MakeStruct	(0X804CF8C,	"Elf32_Dyn");
	set_cmt	(0X804CF94,	"DT_JMPREL ",	0);
	MakeStruct	(0X804CF94,	"Elf32_Dyn");
	set_cmt	(0X804CF9C,	"DT_REL ",	0);
	MakeStruct	(0X804CF9C,	"Elf32_Dyn");
	set_cmt	(0X804CFA4,	"DT_RELSZ ",	0);
	MakeStruct	(0X804CFA4,	"Elf32_Dyn");
	set_cmt	(0X804CFAC,	"DT_RELENT ",	0);
	MakeStruct	(0X804CFAC,	"Elf32_Dyn");
	set_cmt	(0X804CFB4,	"DT_VERNEED ",	0);
	MakeStruct	(0X804CFB4,	"Elf32_Dyn");
	set_cmt	(0X804CFBC,	"DT_VERNEEDNUM ",	0);
	MakeStruct	(0X804CFBC,	"Elf32_Dyn");
	set_cmt	(0X804CFC4,	"DT_VERSYM ",	0);
	MakeStruct	(0X804CFC4,	"Elf32_Dyn");
	set_cmt	(0X804CFCC,	"DT_NULL ",	0);
	MakeStruct	(0X804CFCC,	"Elf32_Dyn");
	create_dword	(x=0X804CFFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804CFFC,	"__gmon_start___ptr");
	create_dword	(x=0X804D000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X804D004);
	create_dword	(0X804D008);
	create_dword	(x=0X804D00C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D01C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D02C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D03C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D04C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D05C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804D068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X804D074);
	set_name	(0X804D074,	"csp");
	set_cmt	(0X804D080,	"Copy of shared data",	0);
	create_dword	(0X804D080);
	set_name	(0X804D080,	"stdin");
	set_cmt	(0X804D084,	"Copy of shared data",	0);
	create_dword	(0X804D084);
	set_name	(0X804D084,	"stdout");
	create_byte	(0X804D088);
	make_array	(0X804D089,	0X3);
	create_dword	(0X804D08C);
	set_name	(0X804D08C,	"pc");
	create_dword	(0X804D090);
	set_name	(0X804D090,	"calc_buf");
	create_byte	(0X804D094);
	set_name	(0X804D094,	"is_error");
	make_array	(0X804D095,	0X3);
	create_dword	(0X804D098);
	set_name	(0X804D098,	"error");
	make_array	(0X804D09C,	0X4);
	create_byte	(0X804D0A0);
	set_name	(0X804D0A0,	"debug");
	make_array	(0X804D0A1,	0X3);
	create_dword	(0X804D0A4);
	set_name	(0X804D0A4,	"stack");
	create_dword	(0X804D4A4);
	set_name	(0X804D4A4,	"contact_info");
	create_insn	(0X804D4A8);
	set_name	(0X804D4A8,	"read");
	create_insn	(0X804D4AC);
	set_name	(0X804D4AC,	"printf");
	create_insn	(0X804D4B0);
	set_name	(0X804D4B0,	"free");
	create_insn	(0X804D4B4);
	set_name	(0X804D4B4,	"strdup");
	create_insn	(0X804D4B8);
	set_name	(0X804D4B8,	"memcpy");
	create_insn	(0X804D4BC);
	set_name	(0X804D4BC,	"fclose");
	create_insn	(0X804D4C0);
	set_name	(0X804D4C0,	"__stack_chk_fail");
	create_insn	(0X804D4C4);
	set_name	(0X804D4C4,	"perror");
	create_insn	(0X804D4C8);
	set_name	(0X804D4C8,	"malloc");
	create_insn	(0X804D4CC);
	set_name	(0X804D4CC,	"puts");
	create_insn	(0X804D4D0);
	set_name	(0X804D4D0,	"scanf");
	create_insn	(0X804D4D4);
	set_name	(0X804D4D4,	"exit");
	create_insn	(0X804D4D8);
	set_name	(0X804D4D8,	"fscanf");
	create_insn	(0X804D4DC);
	set_name	(0X804D4DC,	"strlen");
	create_insn	(0X804D4E0);
	set_name	(0X804D4E0,	"__libc_start_main");
	create_insn	(0X804D4E4);
	set_name	(0X804D4E4,	"write");
	create_insn	(0X804D4E8);
	set_name	(0X804D4E8,	"atol");
	create_insn	(0X804D4EC);
	set_name	(0X804D4EC,	"setvbuf");
	create_insn	(0X804D4F0);
	set_name	(0X804D4F0,	"fopen");
	create_insn	(0X804D4F4);
	set_name	(0X804D4F4,	"memset");
	create_insn	(0X804D4F8);
	set_name	(0X804D4F8,	"strncpy");
	create_insn	(0X804D4FC);
	set_name	(0X804D4FC,	"sprintf");
	create_insn	(0X804D500);
	set_name	(0X804D500,	"strncmp");
	create_insn	(0X804D504);
	set_name	(0X804D504,	"calloc");
	create_insn	(0X804D508);
	set_name	(0X804D508,	"__imp___gmon_start__");
}

static Functions_0(void) {

	add_func    (0X80485D4,0X80485F7);
	set_func_flags(0X80485D4,0x5400);
	set_frame_size(0X80485D4, 0XC, 0, 0);
	add_func    (0X8048600,0X804860C);
	set_func_flags(0X8048600,0x1400);
	add_func    (0X8048610,0X8048616);
	set_func_flags(0X8048610,0x54c0);
	SetType(0X8048610, "ssize_t read(int fd, void *buf, size_t nbytes);");
	set_frame_size(0X8048610, 0, 0, 0);
	define_local_var(0X8048610, 0X8048616, "[bp+0X4]", "fd");
	define_local_var(0X8048610, 0X8048616, "[bp+0X8]", "buf");
	define_local_var(0X8048610, 0X8048616, "[bp+0XC]", "nbytes");
	add_func    (0X8048620,0X8048626);
	set_func_flags(0X8048620,0x54c0);
	SetType(0X8048620, "int printf(const char *format, ...);");
	set_frame_size(0X8048620, 0, 0, 0);
	define_local_var(0X8048620, 0X8048626, "[bp+0X4]", "format");
	add_func    (0X8048630,0X8048636);
	set_func_flags(0X8048630,0x54c0);
	SetType(0X8048630, "void free(void *ptr);");
	set_frame_size(0X8048630, 0, 0, 0);
	define_local_var(0X8048630, 0X8048636, "[bp+0X4]", "ptr");
	add_func    (0X8048640,0X8048646);
	set_func_flags(0X8048640,0x54c0);
	SetType(0X8048640, "char *strdup(const char *s);");
	set_frame_size(0X8048640, 0, 0, 0);
	define_local_var(0X8048640, 0X8048646, "[bp+0X4]", "s");
	add_func    (0X8048650,0X8048656);
	set_func_flags(0X8048650,0x54c0);
	SetType(0X8048650, "void *memcpy(void *dest, const void *src, size_t n);");
	set_frame_size(0X8048650, 0, 0, 0);
	define_local_var(0X8048650, 0X8048656, "[bp+0X4]", "dest");
	define_local_var(0X8048650, 0X8048656, "[bp+0X8]", "src");
	define_local_var(0X8048650, 0X8048656, "[bp+0XC]", "n");
	add_func    (0X8048660,0X8048666);
	set_func_flags(0X8048660,0x54c0);
	SetType(0X8048660, "int fclose(FILE *stream);");
	set_frame_size(0X8048660, 0, 0, 0);
	define_local_var(0X8048660, 0X8048666, "[bp+0X4]", "stream");
	add_func    (0X8048670,0X8048676);
	set_func_flags(0X8048670,0x14c1);
	add_func    (0X8048680,0X8048686);
	set_func_flags(0X8048680,0x54c0);
	SetType(0X8048680, "void perror(const char *s);");
	set_frame_size(0X8048680, 0, 0, 0);
	define_local_var(0X8048680, 0X8048686, "[bp+0X4]", "s");
	add_func    (0X8048690,0X8048696);
	set_func_flags(0X8048690,0x54c0);
	SetType(0X8048690, "void *malloc(size_t size);");
	set_frame_size(0X8048690, 0, 0, 0);
	define_local_var(0X8048690, 0X8048696, "[bp+0X4]", "size");
	add_func    (0X80486A0,0X80486A6);
	set_func_flags(0X80486A0,0x54c0);
	SetType(0X80486A0, "int puts(const char *s);");
	set_frame_size(0X80486A0, 0, 0, 0);
	define_local_var(0X80486A0, 0X80486A6, "[bp+0X4]", "s");
	add_func    (0X80486B0,0X80486B6);
	set_func_flags(0X80486B0,0x54c0);
	SetType(0X80486B0, "int scanf(const char *format, ...);");
	set_frame_size(0X80486B0, 0, 0, 0);
	define_local_var(0X80486B0, 0X80486B6, "[bp+0X4]", "format");
	add_func    (0X80486C0,0X80486C6);
	set_func_flags(0X80486C0,0x54c1);
	SetType(0X80486C0, "void exit(int status);");
	set_frame_size(0X80486C0, 0, 0, 0);
	define_local_var(0X80486C0, 0X80486C6, "[bp+0X4]", "status");
	add_func    (0X80486D0,0X80486D6);
	set_func_flags(0X80486D0,0x54c0);
	SetType(0X80486D0, "int fscanf(FILE *stream, const char *format, ...);");
	set_frame_size(0X80486D0, 0, 0, 0);
	define_local_var(0X80486D0, 0X80486D6, "[bp+0X4]", "stream");
	define_local_var(0X80486D0, 0X80486D6, "[bp+0X8]", "format");
	add_func    (0X80486E0,0X80486E6);
	set_func_flags(0X80486E0,0x54c0);
	SetType(0X80486E0, "size_t strlen(const char *s);");
	set_frame_size(0X80486E0, 0, 0, 0);
	define_local_var(0X80486E0, 0X80486E6, "[bp+0X4]", "s");
	add_func    (0X80486F0,0X80486F6);
	set_func_flags(0X80486F0,0x54c0);
	SetType(0X80486F0, "int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	set_frame_size(0X80486F0, 0, 0, 0);
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X4]", "main");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X8]", "argc");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0XC]", "ubp_av");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X10]", "init");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X14]", "fini");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X18]", "rtld_fini");
	define_local_var(0X80486F0, 0X80486F6, "[bp+0X1C]", "stack_end");
	add_func    (0X8048700,0X8048706);
	set_func_flags(0X8048700,0x54c0);
	SetType(0X8048700, "ssize_t write(int fd, const void *buf, size_t n);");
	set_frame_size(0X8048700, 0, 0, 0);
	define_local_var(0X8048700, 0X8048706, "[bp+0X4]", "fd");
	define_local_var(0X8048700, 0X8048706, "[bp+0X8]", "buf");
	define_local_var(0X8048700, 0X8048706, "[bp+0XC]", "n");
	add_func    (0X8048710,0X8048716);
	set_func_flags(0X8048710,0x54c0);
	SetType(0X8048710, "int atol(const char *nptr);");
	set_frame_size(0X8048710, 0, 0, 0);
	define_local_var(0X8048710, 0X8048716, "[bp+0X4]", "nptr");
	add_func    (0X8048720,0X8048726);
	set_func_flags(0X8048720,0x54c0);
	SetType(0X8048720, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	set_frame_size(0X8048720, 0, 0, 0);
	define_local_var(0X8048720, 0X8048726, "[bp+0X4]", "stream");
	define_local_var(0X8048720, 0X8048726, "[bp+0X8]", "buf");
	define_local_var(0X8048720, 0X8048726, "[bp+0XC]", "modes");
	define_local_var(0X8048720, 0X8048726, "[bp+0X10]", "n");
	add_func    (0X8048730,0X8048736);
	set_func_flags(0X8048730,0x54c0);
	SetType(0X8048730, "FILE *fopen(const char *filename, const char *modes);");
	set_frame_size(0X8048730, 0, 0, 0);
	define_local_var(0X8048730, 0X8048736, "[bp+0X4]", "filename");
	define_local_var(0X8048730, 0X8048736, "[bp+0X8]", "modes");
	add_func    (0X8048740,0X8048746);
	set_func_flags(0X8048740,0x54c0);
	SetType(0X8048740, "void *memset(void *s, int c, size_t n);");
	set_frame_size(0X8048740, 0, 0, 0);
	define_local_var(0X8048740, 0X8048746, "[bp+0X4]", "s");
	define_local_var(0X8048740, 0X8048746, "[bp+0X8]", "c");
	define_local_var(0X8048740, 0X8048746, "[bp+0XC]", "n");
	add_func    (0X8048750,0X8048756);
	set_func_flags(0X8048750,0x54c0);
	SetType(0X8048750, "char *strncpy(char *dest, const char *src, size_t n);");
	set_frame_size(0X8048750, 0, 0, 0);
	define_local_var(0X8048750, 0X8048756, "[bp+0X4]", "dest");
	define_local_var(0X8048750, 0X8048756, "[bp+0X8]", "src");
	define_local_var(0X8048750, 0X8048756, "[bp+0XC]", "n");
	add_func    (0X8048760,0X8048766);
	set_func_flags(0X8048760,0x54c0);
	SetType(0X8048760, "int sprintf(char *s, const char *format, ...);");
	set_frame_size(0X8048760, 0, 0, 0);
	define_local_var(0X8048760, 0X8048766, "[bp+0X4]", "s");
	define_local_var(0X8048760, 0X8048766, "[bp+0X8]", "format");
	add_func    (0X8048770,0X8048776);
	set_func_flags(0X8048770,0x54c0);
	SetType(0X8048770, "int strncmp(const char *s1, const char *s2, size_t n);");
	set_frame_size(0X8048770, 0, 0, 0);
	define_local_var(0X8048770, 0X8048776, "[bp+0X4]", "s1");
	define_local_var(0X8048770, 0X8048776, "[bp+0X8]", "s2");
	define_local_var(0X8048770, 0X8048776, "[bp+0XC]", "n");
	add_func    (0X8048780,0X8048786);
	set_func_flags(0X8048780,0x54c0);
	SetType(0X8048780, "void *calloc(size_t nmemb, size_t size);");
	set_frame_size(0X8048780, 0, 0, 0);
	define_local_var(0X8048780, 0X8048786, "[bp+0X4]", "nmemb");
	define_local_var(0X8048780, 0X8048786, "[bp+0X8]", "size");
	add_func    (0X8048790,0X8048796);
	set_func_flags(0X8048790,0x14c0);
	add_func    (0X80487A0,0X80487C2);
	set_func_flags(0X80487A0,0x1c01);
	add_func    (0X80487D0,0X80487D4);
	set_func_flags(0X80487D0,0x5400);
	set_frame_size(0X80487D0, 0, 0, 0);
	add_func    (0X80487E0,0X8048812);
	set_func_flags(0X80487E0,0x5400);
	set_frame_size(0X80487E0, 0, 0, 0);
	add_func    (0X8048858,0X804885A);
	set_func_flags(0X8048858,0x5440);
	set_frame_size(0X8048858, 0, 0, 0);
	add_func    (0X8048860,0X8048882);
	set_func_flags(0X8048860,0x5400);
	set_frame_size(0X8048860, 0, 0, 0);
	add_func    (0X8048890,0X8048896);
	set_func_flags(0X8048890,0x5410);
	set_frame_size(0X8048890, 0, 4, 0);
	add_func    (0X80488F0,0X8048940);
	set_func_flags(0X80488F0,0x5410);
	set_frame_size(0X80488F0, 0X8, 4, 0);
	add_func    (0X8048940,0X804898D);
	set_func_flags(0X8048940,0x5410);
	SetType(0X8048940, "_DWORD *__cdecl init_unit(int a1, int a2, num_unit *a3);");
	set_frame_size(0X8048940, 0X18, 4, 0);
	add_func    (0X8048990,0X80489FC);
	set_func_flags(0X8048990,0x5410);
	SetType(0X8048990, "int __cdecl skip_zero(char *a1, unsigned int a2);");
	set_frame_size(0X8048990, 0X10, 4, 0);
	add_func    (0X8048A00,0X8048AE2);
	set_func_flags(0X8048A00,0x5410);
	set_frame_size(0X8048A00, 0X28, 4, 0);
	add_func    (0X8048AF0,0X8048B34);
	set_func_flags(0X8048AF0,0x5410);
	set_frame_size(0X8048AF0, 0X8, 4, 0);
	add_func    (0X8048B40,0X8048B54);
	set_func_flags(0X8048B40,0x5410);
	set_frame_size(0X8048B40, 0, 4, 0);
	add_func    (0X8048B60,0X8048B7B);
	set_func_flags(0X8048B60,0x5410);
	set_frame_size(0X8048B60, 0X8, 4, 0);
	add_func    (0X8048B80,0X8048C2A);
	set_func_flags(0X8048B80,0x5410);
	SetType(0X8048B80, "unsigned int __cdecl free_num_unit(num_unit *a1);");
	set_frame_size(0X8048B80, 0X148, 4, 0);
	define_local_var(0X8048B80, 0X8048C2A, "[bp-0X124]", "s");
	add_func    (0X8048C30,0X8048C5A);
	set_func_flags(0X8048C30,0x5410);
	SetType(0X8048C30, "void __cdecl free_unit(unit *ptr);");
	set_frame_size(0X8048C30, 0X8, 4, 0);
	define_local_var(0X8048C30, 0X8048C5A, "[bp+0X8]", "ptr");
	add_func    (0X8048C60,0X8048CAD);
	set_func_flags(0X8048C60,0x5410);
	set_frame_size(0X8048C60, 0X6, 4, 0);
	add_func    (0X8048CB0,0X8048CCC);
	set_func_flags(0X8048CB0,0x5410);
	set_frame_size(0X8048CB0, 0X8, 4, 0);
	add_func    (0X8048CD0,0X8048CE1);
	set_func_flags(0X8048CD0,0x5410);
	set_frame_size(0X8048CD0, 0, 4, 0);
	add_func    (0X8048CF0,0X8048DC3);
	set_func_flags(0X8048CF0,0x5410);
	set_frame_size(0X8048CF0, 0X98, 4, 0);
	define_local_var(0X8048CF0, 0X8048DC3, "[bp-0X78]", "s");
	add_func    (0X8048DD0,0X8048E9D);
	set_func_flags(0X8048DD0,0x5410);
	SetType(0X8048DD0, "unsigned int __cdecl push_stack(unit *a1);");
	set_frame_size(0X8048DD0, 0X88, 4, 0);
	define_local_var(0X8048DD0, 0X8048E9D, "[bp-0X68]", "s");
	add_func    (0X8048EA0,0X8048ED3);
	set_func_flags(0X8048EA0,0x5410);
	SetType(0X8048EA0, "num_unit *__cdecl swap_num_unit(num_unit **a1, num_unit **a2);");
	set_frame_size(0X8048EA0, 0X10, 4, 0);
	add_func    (0X8048F60,0X804973D);
	set_func_flags(0X8048F60,0x5410);
	SetType(0X8048F60, "num_unit *__cdecl plus(num_unit *n1, num_unit *n2);");
	set_frame_size(0X8048F60, 0X238, 4, 0);
	define_local_var(0X8048F60, 0X804973D, "[bp-0X1FC]", "dest");
	define_local_var(0X8048F60, 0X804973D, "[bp-0X1F8]", "src");
	define_local_var(0X8048F60, 0X804973D, "[bp-0X1E9]", "b");
	define_local_var(0X8048F60, 0X804973D, "[bp-0X1E1]", "a");
	define_local_var(0X8048F60, 0X804973D, "[bp-0X1BC]", "s");
	define_local_var(0X8048F60, 0X804973D, "[bp-0X17C]", "ret");
	define_local_var(0X8048F60, 0X804973D, "[bp+0X8]", "n1");
	define_local_var(0X8048F60, 0X804973D, "[bp+0XC]", "n2");
	add_func    (0X8049740,0X804A044);
	set_func_flags(0X8049740,0x5410);
	SetType(0X8049740, "num_unit *__cdecl minus(num_unit *n1, num_unit *n2);");
	set_frame_size(0X8049740, 0X1C8, 4, 0);
	define_local_var(0X8049740, 0X804A044, "[bp-0X154]", "nptr");
	define_local_var(0X8049740, 0X804A044, "[bp-0X118]", "s");
	define_local_var(0X8049740, 0X804A044, "[bp+0X8]", "n1");
	define_local_var(0X8049740, 0X804A044, "[bp+0XC]", "n2");
	add_func    (0X804A050,0X804A0AB);
	set_func_flags(0X804A050,0x5410);
	SetType(0X804A050, "int __cdecl strip_line(char *a1);");
	set_frame_size(0X804A050, 0X8, 4, 0);
	add_func    (0X804A0B0,0X804A345);
	set_func_flags(0X804A0B0,0x5410);
	SetType(0X804A0B0, "num_unit *__cdecl multiple(num_unit *a1, num_unit *a2);");
	set_frame_size(0X804A0B0, 0X178, 4, 0);
	define_local_var(0X804A0B0, 0X804A345, "[bp-0X118]", "s");
	add_func    (0X804A350,0X804A468);
	set_func_flags(0X804A350,0x5410);
	SetType(0X804A350, "unsigned int __cdecl sub_804A350(num_unit *a1, int a2);");
	set_frame_size(0X804A350, 0X148, 4, 0);
	define_local_var(0X804A350, 0X804A468, "[bp-0X118]", "s");
	add_func    (0X804A470,0X804A666);
	set_func_flags(0X804A470,0x5410);
	SetType(0X804A470, "num_unit *__cdecl division(num_unit *a1, num_unit *a2);");
	set_frame_size(0X804A470, 0X48, 4, 0);
	define_local_var(0X804A470, 0X804A666, "[bp+0X8]", "a1");
	add_func    (0X804A670,0X804A85B);
	set_func_flags(0X804A670,0x5410);
	set_frame_size(0X804A670, 0X158, 4, 0);
	define_local_var(0X804A670, 0X804A85B, "[bp-0X118]", "cnt");
	define_local_var(0X804A670, 0X804A85B, "[bp-0X114]", "s");
	add_func    (0X804A860,0X804AA05);
	set_func_flags(0X804A860,0x5410);
	SetType(0X804A860, "_DWORD *__stdcall get_op(sig *a1);");
	set_frame_size(0X804A860, 0X48, 4, 0X4);
	define_local_var(0X804A860, 0X804AA05, "[bp-0X4]", "a1");
	add_func    (0X804AA10,0X804AB5C);
	set_func_flags(0X804AA10,0x5410);
	SetType(0X804AA10, "num_unit *__cdecl do_by_op(num_unit *n1, num_unit *n2, int op);");
	set_frame_size(0X804AA10, 0X28, 4, 0);
	define_local_var(0X804AA10, 0X804AB5C, "[bp+0X8]", "n1");
	define_local_var(0X804AA10, 0X804AB5C, "[bp+0XC]", "n2");
	define_local_var(0X804AA10, 0X804AB5C, "[bp+0X10]", "op");
	add_func    (0X804AB60,0X804ACBD);
	set_func_flags(0X804AB60,0x5410);
	set_frame_size(0X804AB60, 0X58, 4, 0);
	define_local_var(0X804AB60, 0X804ACBD, "[bp-0X40]", "format");
	define_local_var(0X804AB60, 0X804ACBD, "[bp-0X3C]", "nptr");
	define_local_var(0X804AB60, 0X804ACBD, "[bp-0X18]", "a1");
	define_local_var(0X804AB60, 0X804ACBD, "[bp-0X8]", "a3");
	add_func    (0X804ACC0,0X804ADED);
	set_func_flags(0X804ACC0,0x5410);
	set_frame_size(0X804ACC0, 0X18, 4, 0);
	add_func    (0X804ADF0,0X804AFA0);
	set_func_flags(0X804ADF0,0x5410);
	set_frame_size(0X804ADF0, 0X78, 4, 0);
	add_func    (0X804AFA0,0X804B174);
	set_func_flags(0X804AFA0,0x5410);
	SetType(0X804AFA0, "int __cdecl main(int, char **, char **);");
	set_frame_size(0X804AFA0, 0XA8, 4, 0);
	define_local_var(0X804AFA0, 0X804B174, "[bp-0X50]", "stream");
	define_local_var(0X804AFA0, 0X804B174, "[bp-0X48]", "s");
	add_func    (0X804B180,0X804B1AF);
	set_func_flags(0X804B180,0x5410);
	SetType(0X804B180, "int __cdecl init_sig(sig *a1, int a2, int a3);");
	set_frame_size(0X804B180, 0X14, 4, 0);
	add_func    (0X804B1B0,0X804B1C7);
	set_func_flags(0X804B1B0,0x5410);
	SetType(0X804B1B0, "int __cdecl get_op_priority(unit *a1);");
	set_frame_size(0X804B1B0, 0X4, 4, 0);
	add_func    (0X804B1D0,0X804B1F0);
	set_func_flags(0X804B1D0,0x5410);
	SetType(0X804B1D0, "_BOOL4 __cdecl get_unit_num(unit *a1);");
	set_frame_size(0X804B1D0, 0X4, 4, 0);
	add_func    (0X804B1F0,0X804B33A);
	set_func_flags(0X804B1F0,0x5400);
	set_frame_size(0X804B1F0, 0X2C, 0, 0);
	add_func    (0X804B340,0X804B39D);
	set_func_flags(0X804B340,0x5400);
	SetType(0X804B340, "void init(void);");
	set_frame_size(0X804B340, 0X10, 0, 0);
	add_func    (0X804B3A0,0X804B3A2);
	set_func_flags(0X804B3A0,0x5440);
	SetType(0X804B3A0, "void fini(void);");
	set_frame_size(0X804B3A0, 0, 0, 0);
	add_func    (0X804B3A4,0X804B3B8);
	set_func_flags(0X804B3A4,0x5400);
	set_frame_size(0X804B3A4, 0XC, 0, 0);
	add_func    (0X804D4A8,0X804D4AC);
	set_func_flags(0X804D4A8,0x5400);
	SetType(0X804D4A8, "ssize_t read(int fd, void *buf, size_t nbytes);");
	set_frame_size(0X804D4A8, 0, 0, 0);
	add_func    (0X804D4AC,0X804D4B0);
	set_func_flags(0X804D4AC,0x5400);
	SetType(0X804D4AC, "int printf(const char *format, ...);");
	set_frame_size(0X804D4AC, 0, 0, 0);
	add_func    (0X804D4B0,0X804D4B4);
	set_func_flags(0X804D4B0,0x5400);
	SetType(0X804D4B0, "void free(void *ptr);");
	set_frame_size(0X804D4B0, 0, 0, 0);
	add_func    (0X804D4B4,0X804D4B8);
	set_func_flags(0X804D4B4,0x5400);
	SetType(0X804D4B4, "char *strdup(const char *s);");
	set_frame_size(0X804D4B4, 0, 0, 0);
	add_func    (0X804D4B8,0X804D4BC);
	set_func_flags(0X804D4B8,0x5400);
	SetType(0X804D4B8, "void *memcpy(void *dest, const void *src, size_t n);");
	set_frame_size(0X804D4B8, 0, 0, 0);
	add_func    (0X804D4BC,0X804D4C0);
	set_func_flags(0X804D4BC,0x5400);
	SetType(0X804D4BC, "int fclose(FILE *stream);");
	set_frame_size(0X804D4BC, 0, 0, 0);
	add_func    (0X804D4C0,0X804D4C4);
	set_func_flags(0X804D4C0,0x1401);
	add_func    (0X804D4C4,0X804D4C8);
	set_func_flags(0X804D4C4,0x5400);
	SetType(0X804D4C4, "void perror(const char *s);");
	set_frame_size(0X804D4C4, 0, 0, 0);
	add_func    (0X804D4C8,0X804D4CC);
	set_func_flags(0X804D4C8,0x5400);
	SetType(0X804D4C8, "void *malloc(size_t size);");
	set_frame_size(0X804D4C8, 0, 0, 0);
	add_func    (0X804D4CC,0X804D4D0);
	set_func_flags(0X804D4CC,0x5400);
	SetType(0X804D4CC, "int puts(const char *s);");
	set_frame_size(0X804D4CC, 0, 0, 0);
	add_func    (0X804D4D0,0X804D4D4);
	set_func_flags(0X804D4D0,0x5400);
	SetType(0X804D4D0, "int scanf(const char *format, ...);");
	set_frame_size(0X804D4D0, 0, 0, 0);
	add_func    (0X804D4D4,0X804D4D8);
	set_func_flags(0X804D4D4,0x5401);
	SetType(0X804D4D4, "void exit(int status);");
	set_frame_size(0X804D4D4, 0, 0, 0);
	add_func    (0X804D4D8,0X804D4DC);
	set_func_flags(0X804D4D8,0x5400);
	SetType(0X804D4D8, "int fscanf(FILE *stream, const char *format, ...);");
	set_frame_size(0X804D4D8, 0, 0, 0);
	add_func    (0X804D4DC,0X804D4E0);
	set_func_flags(0X804D4DC,0x5400);
	SetType(0X804D4DC, "size_t strlen(const char *s);");
	set_frame_size(0X804D4DC, 0, 0, 0);
	add_func    (0X804D4E0,0X804D4E4);
	set_func_flags(0X804D4E0,0x5400);
	SetType(0X804D4E0, "int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	set_frame_size(0X804D4E0, 0, 0, 0);
	add_func    (0X804D4E4,0X804D4E8);
	set_func_flags(0X804D4E4,0x5400);
	SetType(0X804D4E4, "ssize_t write(int fd, const void *buf, size_t n);");
	set_frame_size(0X804D4E4, 0, 0, 0);
	add_func    (0X804D4E8,0X804D4EC);
	set_func_flags(0X804D4E8,0x5400);
	SetType(0X804D4E8, "int atol(const char *nptr);");
	set_frame_size(0X804D4E8, 0, 0, 0);
	add_func    (0X804D4EC,0X804D4F0);
	set_func_flags(0X804D4EC,0x5400);
	SetType(0X804D4EC, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	set_frame_size(0X804D4EC, 0, 0, 0);
	add_func    (0X804D4F0,0X804D4F4);
	set_func_flags(0X804D4F0,0x5400);
	SetType(0X804D4F0, "FILE *fopen(const char *filename, const char *modes);");
	set_frame_size(0X804D4F0, 0, 0, 0);
	add_func    (0X804D4F4,0X804D4F8);
	set_func_flags(0X804D4F4,0x5400);
	SetType(0X804D4F4, "void *memset(void *s, int c, size_t n);");
	set_frame_size(0X804D4F4, 0, 0, 0);
	add_func    (0X804D4F8,0X804D4FC);
	set_func_flags(0X804D4F8,0x5400);
	SetType(0X804D4F8, "char *strncpy(char *dest, const char *src, size_t n);");
	set_frame_size(0X804D4F8, 0, 0, 0);
	add_func    (0X804D4FC,0X804D500);
	set_func_flags(0X804D4FC,0x5400);
	SetType(0X804D4FC, "int sprintf(char *s, const char *format, ...);");
	set_frame_size(0X804D4FC, 0, 0, 0);
	add_func    (0X804D500,0X804D504);
	set_func_flags(0X804D500,0x5400);
	SetType(0X804D500, "int strncmp(const char *s1, const char *s2, size_t n);");
	set_frame_size(0X804D500, 0, 0, 0);
	add_func    (0X804D504,0X804D508);
	set_func_flags(0X804D504,0x5400);
	SetType(0X804D504, "void *calloc(size_t nmemb, size_t size);");
	set_frame_size(0X804D504, 0, 0, 0);
	add_func    (0X804D508,0X804D50C);
	set_func_flags(0X804D508,0x1400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X8048000,"es",0,3);
	split_sreg_range(0X80485D4,"es",0XFFFFFFFF,3);
	split_sreg_range(0X80485F7,"es",0,3);
	split_sreg_range(0X8048600,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048790,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048798,"es",0,3);
	split_sreg_range(0X80487A0,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804B3A2,"es",0,3);
	split_sreg_range(0X804B3A4,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804B3B8,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804B7ED,"es",0,3);
	split_sreg_range(0X804B7F0,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804B8A4,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804CF0C,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804CF10,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804CF14,"es",0,3);
	split_sreg_range(0X804CFFC,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804D000,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804D06C,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804D078,"es",0,3);
	split_sreg_range(0X804D080,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804D4A8,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"ss",0,3);
	split_sreg_range(0X80485D4,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X80485F7,"ss",0,3);
	split_sreg_range(0X8048600,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048790,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048798,"ss",0,3);
	split_sreg_range(0X80487A0,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804B3A2,"ss",0,3);
	split_sreg_range(0X804B3A4,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804B3B8,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804B7ED,"ss",0,3);
	split_sreg_range(0X804B7F0,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804B8A4,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804CF0C,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804CF10,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804CF14,"ss",0,3);
	split_sreg_range(0X804CFFC,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804D000,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804D06C,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804D078,"ss",0,3);
	split_sreg_range(0X804D080,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804D4A8,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"ds",0X10,3);
	split_sreg_range(0X80485D4,"ds",0X10,3);
	split_sreg_range(0X80485F7,"ds",0X10,3);
	split_sreg_range(0X8048600,"ds",0X10,3);
	split_sreg_range(0X8048790,"ds",0X10,3);
	split_sreg_range(0X8048798,"ds",0X10,3);
	split_sreg_range(0X80487A0,"ds",0X10,3);
	split_sreg_range(0X804B3A2,"ds",0X10,3);
	split_sreg_range(0X804B3A4,"ds",0X10,3);
	split_sreg_range(0X804B3B8,"ds",0X10,3);
	split_sreg_range(0X804B7ED,"ds",0X10,3);
	split_sreg_range(0X804B7F0,"ds",0X10,3);
	split_sreg_range(0X804B8A4,"ds",0X10,3);
	split_sreg_range(0X804CF0C,"ds",0X10,3);
	split_sreg_range(0X804CF10,"ds",0X10,3);
	split_sreg_range(0X804CF14,"ds",0X10,3);
	split_sreg_range(0X804CFFC,"ds",0X10,3);
	split_sreg_range(0X804D000,"ds",0X10,3);
	split_sreg_range(0X804D06C,"ds",0X10,3);
	split_sreg_range(0X804D078,"ds",0X10,3);
	split_sreg_range(0X804D080,"ds",0X10,3);
	split_sreg_range(0X804D4A8,"ds",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"fs",0,3);
	split_sreg_range(0X80485D4,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X80485F7,"fs",0,3);
	split_sreg_range(0X8048600,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048790,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048798,"fs",0,3);
	split_sreg_range(0X80487A0,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804B3A2,"fs",0,3);
	split_sreg_range(0X804B3A4,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804B3B8,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804B7ED,"fs",0,3);
	split_sreg_range(0X804B7F0,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804B8A4,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF0C,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF10,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF14,"fs",0,3);
	split_sreg_range(0X804CFFC,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804D000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804D06C,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804D078,"fs",0,3);
	split_sreg_range(0X804D080,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804D4A8,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"gs",0,3);
	split_sreg_range(0X80485D4,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X80485F7,"gs",0,3);
	split_sreg_range(0X8048600,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8048790,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8048798,"gs",0,3);
	split_sreg_range(0X80487A0,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804B3A2,"gs",0,3);
	split_sreg_range(0X804B3A4,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804B3B8,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804B7ED,"gs",0,3);
	split_sreg_range(0X804B7F0,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804B8A4,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF0C,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF10,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804CF14,"gs",0,3);
	split_sreg_range(0X804CFFC,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804D000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804D06C,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804D078,"gs",0,3);
	split_sreg_range(0X804D080,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804D4A8,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
