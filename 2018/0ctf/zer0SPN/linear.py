sbox = [62, 117, 195, 179, 20, 210, 41, 66, 116, 178, 152, 143, 75, 105, 254, 1, 158, 95, 101, 175, 191, 166, 36, 24, 50, 39, 190, 120, 52, 242, 182, 185, 61, 225, 140, 38, 150, 80, 19, 109, 246, 252, 40, 13, 65, 236, 124, 186, 214, 86, 235, 100, 97, 49, 197, 154, 176, 199, 253, 69, 88, 112, 139, 77, 184, 45, 133, 104, 15, 54, 177, 244, 160, 169, 82, 148, 73, 30, 229, 35, 79, 137, 157, 180, 248, 163, 241, 231, 81, 94, 165, 9, 162, 233, 18, 85, 217, 84, 7, 55, 63, 171, 56, 118, 237, 132, 136, 22, 90, 221, 103, 161, 205, 11, 255, 14, 122, 47, 71, 201, 99, 220, 83, 74, 173, 76, 144, 16, 155, 126, 60, 96, 44, 234, 17, 215, 107, 138, 159, 183, 251, 3, 198, 0, 89, 170, 131, 151, 219, 29, 230, 32, 187, 125, 134, 64, 12, 202, 164, 247, 25, 223, 222, 119, 174, 67, 147, 146, 206, 51, 243, 53, 121, 239, 68, 130, 70, 203, 211, 111, 108, 113, 8, 106, 57, 240, 21, 93, 142, 238, 167, 5, 128, 72, 189, 192, 193, 92, 10, 204, 87, 145, 188, 172, 224, 226, 207, 27, 218, 48, 33, 28, 123, 6, 37, 59, 4, 102, 114, 91, 23, 209, 34, 42, 2, 196, 141, 208, 181, 245, 43, 78, 213, 216, 232, 46, 98, 26, 212, 58, 115, 194, 200, 129, 227, 249, 127, 149, 135, 228, 31, 153, 250, 156, 168, 110]
ptable = [
    0, 8, 16, 24, 32, 40, 48, 56, 
    1, 9, 17, 25, 33, 41, 49, 57, 
    2, 10, 18, 26, 34, 42, 50, 58, 
    3, 11, 19, 27, 35, 43, 51, 59, 
    4, 12, 20, 28, 36, 44, 52, 60, 
    5, 13, 21, 29, 37, 45, 53, 61, 
    6, 14, 22, 30, 38, 46, 54, 62, 
    7, 15, 23, 31, 39, 47, 55, 63
]
#sbox = [0xe,4,0xd,1,2,0xf,0xb,8,3,0xa,6,0xc,5,9,0,7]

Nbits = 8
B = 1<<Nbits

stat=[[0]*B for i in range(B)]

def calc(msk,val):
    res = 0
    for i in range(Nbits):
        cur = 1<<i
        if msk&cur>0 and val&cur>0:
            res ^= 1
    return res

'''
for a in range(B):
    b=sbox[a]
    for i in range(B):
        x=calc(a,i)
        for j in range(B):
            y=calc(b,j)
            if x==y:
                stat[i][j]+=1
'''

'''
for i in range(B):
    for j in range(B):
        print "%d\t" % (stat[i][j]-B/2),
    print
'''
'''
cands = [0]*256
for i in range(256):
    tmp=i
    mm=-1
    res=-1
    for j in range(256):
        mm2=abs(stat[tmp][j]-128)
        if mm2>mm:
            mm=mm2
            res=j
    cands[i]=res
    if (bin(i)[2:].count('1')==1 or bin(res)[2:].count('1')==1):
        print i,res
'''
cands=[0, 135, 155, 28, 223, 88, 68, 195, 178, 53, 41, 174, 109, 234, 246, 113, 117, 242, 238, 105, 170, 45, 49, 182, 199, 64, 92, 219, 24, 159, 131, 4, 31, 152, 132, 3, 192, 71, 91, 220, 173, 42, 54, 177, 114, 245, 233, 110, 106, 237, 241, 118, 181, 50, 46, 169, 216, 95, 67, 196, 7, 128, 156, 27, 130, 5, 25, 158, 93, 218, 198, 65, 48, 183, 171, 44, 239, 104, 116, 243, 247, 112, 108, 235, 40, 175, 179, 52, 69, 194, 222, 89, 154, 29, 1, 134, 157, 26, 6, 129, 66, 197, 217, 94, 47, 168, 180, 51, 240, 119, 107, 236, 232, 111, 115, 244, 55, 176, 172, 43, 90, 221, 193, 70, 133, 2, 30, 153, 17, 150, 138, 13, 206, 73, 85, 210, 163, 36, 56, 191, 124, 251, 231, 96, 100, 227, 255, 120, 187, 60, 32, 167, 214, 81, 77, 202, 9, 142, 146, 21, 14, 137, 149, 18, 209, 86, 74, 205, 188, 59, 39, 160, 99, 228, 248, 127, 123, 252, 224, 103, 164, 35, 63, 184, 201, 78, 82, 213, 22, 145, 141, 10, 147, 20, 8, 143, 76, 203, 215, 80, 33, 166, 186, 61, 254, 121, 101, 226, 230, 97, 125, 250, 57, 190, 162, 37, 84, 211, 207, 72, 139, 12, 16, 151, 140, 11, 23, 144, 83, 212, 200, 79, 62, 185, 165, 34, 225, 102, 122, 253, 249, 126, 98, 229, 38, 161, 189, 58, 75, 204, 208, 87, 148, 19, 15, 136]

def bits(pre, state):
    res=''
    first=True
    for i in range(len(state)):
        if state[i]==1:
            if first:
                first=False
            else:
                res+=' + '
            res+=pre+'['+str(i/8)+','+str(7-i%8)+']'
    return res

def b2i(state):
    tmp=0
    for i in range(8):
        if state[i]==1:
            tmp+=(1<<(7-i))
    return tmp

def i2b(val):
    tmp=[0]*8
    for i in range(8):
        if val&(1<<i)>0:
            tmp[7-i]=1
    return tmp

def backward1(state):
    state2=[]
    for j in range(8):
        num=b2i(state[j*8:(j+1)*8])
        res=-1
        for k in range(256):
            if cands[k]==num:
                res=k
        assert res!=-1
        state2.extend(i2b(res))
    return state2


def forward(state, steps):
    cnt=0
    for i in range(steps):
        state2=[]
        for j in range(8):
            num=b2i(state[j*8:(j+1)*8])
            if num!=0:
                cnt+=1
            state2.extend(i2b(cands[num]))
        for j in range(len(state)):
            state[j]=state2[ptable[j]]
    return state,cnt


for i in range(2):
    for j in range(8):
        state=[0]*64
        state[j*8+i]=1
        state2 = backward1(state)
        print bits('P',state2),'+',
        state2, cnt = forward(state,2)
        print bits('U4',state2), cnt+1

'''
maybe should run it interactively
from https://gist.github.com/ngg/f534e51c14a832d69c41289837078773

int bit(int n, int k)
{
    return (n & (1 << k)) != 0;
}

int main()
{
    auto f = fopen("data", "rb");
    for (int i = 0; i < 65536; i++) {
        uint8_t p[8], c[8];
        fread(&p, 8, 1, f);
        fread(&c, 8, 1, f);
        for (int a = 0; a < 256; a++) {
            for (int b = 0; b < 256; b++) {
                int u4b0 = sbox_inv[(int)c[0] ^ a], u4b6 = sbox_inv[(int)c[6] ^ b];
                if (bit(p[0], 0) ^ bit(p[0], 3) ^ bit(p[0], 4) ^ bit(u4b0, 0) ^ bit(u4b0, 4)
                  ^ bit(u4b6, 0) ^ bit(u4b6, 4)) {
                    cnt[a][b]++;
                }
            }
        }
    }
    for (int a = 0; a < 256; a++) {
        for (int b = 0; b < 256; b++) {
            int bias = abs(cnt[a][b] - 32768);
            if (bias > 1000)
                cout << a << " " << b << " " << bias << endl;
        }
    }
}
'''
