#!/usr/bin/env python
# coding:utf-8

plain = 'ABCDEFGH'
# plain = 'vbjiosdf'
enc = ''

def LOGPH(fmt, *args):
    print fmt % args

def putByte(x):
    global enc
    enc += x

def getByte():
    global plain
    c = plain[0]
    plain = plain[1:]
    return ord(c)

def getFinish():
    if plain == '':
        return 1
    else:
        return 0

class Emulator():

    def __init__(self, code):
        self.code = code
        self.pos = 0
        self.stack = []
        self.env = {
            'getFinish': getFinish,
            'getByte': getByte,
            'LOGPH': LOGPH,
            'rshift': lambda x, y: x >> y,
            'band': lambda x, y: x % (y + 1),
            'stringsub': lambda x, l, r: x[l:r + 1],
            'putByte': putByte,
        }

    def read_one(self):
        x = self.code[self.pos]
        self.pos += 1
        return x

    def read_int(self):
        x = 0
        mul = 1
        for i in xrange(4):
            x += self.read_one() * mul
            mul *= 0x100
        return x

    def read_string(self):
        n = self.read_int()
        s = ''
        for i in xrange(n):
            s += chr(self.read_one())
        return s

    def push(self, x):
        print 'push {}'.format(x)
        self.stack.append(x)

    def pop(self):
        x = self.stack.pop()
        print 'pop {}'.format(x)
        return x

    def get_env(self):
        key = self.read_string()
        print 'get env: {}'.format(key)
        assert key in self.env
        return self.env[key]

    def set_env(self):
        k = self.read_string()
        v = self.pop()
        print 'set env: {} -> {}'.format(k, v)
        self.env[k] = v

    def step(self):
        operations = {
            6: lambda x, y: x + y,
            15: lambda x, y: y - x,
            8: lambda x, y: x * y,
            9: lambda x, y: x / y,
            7: lambda x, y: x % y,
            4: lambda x, y: x == y,
            11: lambda x, y: x != y,
            # 11: lambda x, y: x == y,
            14: lambda x, y: x > y,
            12: lambda x, y: x < y,
            16: lambda x, y: x >= y,
            5: lambda x, y: x <= y,
        }

        opcode = self.read_one()
        print 'current pc {}, opcode: {}'.format(self.pos, opcode)
        if opcode == 0:
            self.push(self.get_env())
        elif opcode == 10:
            self.push(self.read_int())
        elif opcode == 13:
            self.push(self.read_string())
        elif opcode == 1:
            self.set_env()
        elif opcode in operations:
            y = self.pop()
            x = self.pop()
            self.push(operations[opcode](x, y))
        # elif opcode == 2:
        #     self.push(-self.tmp)
        elif opcode == 3:
            fn = self.get_env()
            if type(fn) == type(lambda _: _):
                n = self.pop()
                args = [self.pop() for i in xrange(n)]
                print 'execute function with {} arguments: {}'.format(n, args)
                self.push(fn(*args))
            else:
                print 'unexpected function?'
        elif opcode == 17:
            offset = self.read_int()
            cond = self.pop()
            new_pos = (self.pos + offset) & 0xffffffff
            print 'pc move from {} to {}: {}'.format(self.pos, new_pos, cond)
            if cond:
                self.pos = new_pos
        else:
            print 'unexpected opcode', opcode
            print self.code[self.pos:]
            exit(-1)

    def run(self):
        while self.pos != len(self.code):
            self.step()


code = [13, 64, 0, 0, 0, 86, 67, 104, 102, 43, 66, 111, 78, 56, 113, 119, 52, 51, 74, 122, 105, 110, 76, 82, 81, 109, 57, 53, 70, 47, 117, 55, 68, 54, 77, 48, 98, 89, 73, 101, 83, 84, 121, 112, 65, 107, 116, 115, 106, 79, 103, 87, 69, 50, 100, 85, 72, 114, 108, 71, 97, 80, 75, 49, 99, 90, 88, 118, 120, 1, 3, 0, 0, 0, 98, 54, 52, 10, 0, 0, 0, 0, 3, 9, 0, 0, 0, 103, 101, 116, 70, 105, 110, 105, 115, 104, 1, 8, 0, 0, 0, 105, 115, 70, 105, 110, 105, 115, 104, 0, 8, 0, 0, 0, 105, 115, 70, 105, 110, 105, 115, 104, 10, 0, 0, 0, 0, 11, 17, 130, 7, 0, 0, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 3, 0, 0, 0, 99, 117, 114, 0, 3, 0, 0, 0, 99, 117, 114, 1, 5, 0, 0, 0, 98, 121, 116, 101, 49, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 5, 0, 0, 0, 98, 121, 116, 101, 50, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 50, 10, 0, 1, 0, 0, 8, 6, 1, 5, 0, 0, 0, 98, 121, 116, 101, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 8, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 8, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 10, 8, 0, 0, 0, 8, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 8, 10, 13, 0, 0, 0, 8, 6, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 0, 5, 0, 0, 0, 98, 121, 116, 101, 49, 10, 26, 0, 0, 0, 8, 6, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 10, 87, 0, 0, 0, 6, 1, 4, 0, 0, 0, 114, 101, 115, 49, 0, 4, 0, 0, 0, 114, 101, 115, 49, 13, 10, 0, 0, 0, 45, 45, 45, 45, 111, 110, 101, 32, 37, 115, 10, 2, 0, 0, 0, 3, 5, 0, 0, 0, 76, 79, 71, 80, 72, 10, 0, 0, 0, 0, 1, 1, 0, 0, 0, 105, 0, 1, 0, 0, 0, 105, 10, 8, 0, 0, 0, 16, 17, 191, 0, 0, 0, 10, 6, 0, 0, 0, 0, 1, 0, 0, 0, 105, 8, 0, 4, 0, 0, 0, 114, 101, 115, 49, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 1, 4, 0, 0, 0, 116, 101, 109, 112, 10, 63, 0, 0, 0, 0, 4, 0, 0, 0, 116, 101, 109, 112, 10, 2, 0, 0, 0, 3, 4, 0, 0, 0, 98, 97, 110, 100, 10, 1, 0, 0, 0, 6, 1, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 3, 0, 0, 0, 98, 54, 52, 10, 3, 0, 0, 0, 3, 9, 0, 0, 0, 115, 116, 114, 105, 110, 103, 115, 117, 98, 1, 1, 0, 0, 0, 115, 0, 1, 0, 0, 0, 115, 10, 1, 0, 0, 0, 3, 7, 0, 0, 0, 112, 117, 116, 66, 121, 116, 101, 0, 1, 0, 0, 0, 105, 10, 1, 0, 0, 0, 6, 1, 1, 0, 0, 0, 105, 10, 0, 0, 0, 0, 17, 48, 255, 255, 255, 10, 6, 0, 0, 0, 10, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 114, 101, 115, 49, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 10, 0, 1, 0, 0, 7, 1, 8, 0, 0, 0, 115, 97, 118, 101, 98, 121, 116, 101, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 49, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 50, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 51, 0, 2, 0, 0, 0, 120, 49, 0, 2, 0, 0, 0, 120, 50, 10, 0, 1, 0, 0, 8, 6, 0, 2, 0, 0, 0, 120, 51, 10, 0, 1, 0, 0, 8, 10, 0, 1, 0, 0, 8, 6, 1, 1, 0, 0, 0, 120, 10, 0, 1, 0, 0, 10, 0, 1, 0, 0, 8, 10, 0, 1, 0, 0, 8, 1, 4, 0, 0, 0, 98, 97, 115, 101, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 52, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 53, 10, 0, 0, 0, 0, 3, 7, 0, 0, 0, 103, 101, 116, 66, 121, 116, 101, 1, 2, 0, 0, 0, 120, 54, 0, 1, 0, 0, 0, 120, 0, 2, 0, 0, 0, 120, 52, 0, 2, 0, 0, 0, 120, 53, 10, 0, 1, 0, 0, 8, 6, 0, 2, 0, 0, 0, 120, 54, 10, 0, 1, 0, 0, 8, 10, 0, 1, 0, 0, 8, 6, 0, 4, 0, 0, 0, 98, 97, 115, 101, 8, 6, 1, 1, 0, 0, 0, 120, 0, 8, 0, 0, 0, 115, 97, 118, 101, 98, 121, 116, 101, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 50, 0, 1, 0, 0, 0, 120, 10, 14, 240, 0, 0, 7, 10, 0, 1, 0, 0, 8, 6, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 50, 13, 2, 0, 0, 0, 37, 115, 10, 2, 0, 0, 0, 3, 5, 0, 0, 0, 76, 79, 71, 80, 72, 10, 0, 0, 0, 0, 1, 1, 0, 0, 0, 105, 0, 1, 0, 0, 0, 105, 10, 4, 0, 0, 0, 16, 17, 191, 0, 0, 0, 10, 6, 0, 0, 0, 0, 1, 0, 0, 0, 105, 8, 0, 4, 0, 0, 0, 114, 101, 115, 50, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 1, 4, 0, 0, 0, 116, 101, 109, 112, 10, 63, 0, 0, 0, 0, 4, 0, 0, 0, 116, 101, 109, 112, 10, 2, 0, 0, 0, 3, 4, 0, 0, 0, 98, 97, 110, 100, 10, 1, 0, 0, 0, 6, 1, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 3, 0, 0, 0, 98, 54, 52, 10, 3, 0, 0, 0, 3, 9, 0, 0, 0, 115, 116, 114, 105, 110, 103, 115, 117, 98, 1, 1, 0, 0, 0, 115, 0, 1, 0, 0, 0, 115, 10, 1, 0, 0, 0, 3, 7, 0, 0, 0, 112, 117, 116, 66, 121, 116, 101, 0, 1, 0, 0, 0, 105, 10, 1, 0, 0, 0, 6, 1, 1, 0, 0, 0, 105, 10, 0, 0, 0, 0, 17, 48, 255, 255, 255, 0, 1, 0, 0, 0, 120, 10, 204, 213, 0, 0, 7, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 1, 0, 0, 0, 120, 10, 16, 20, 0, 0, 7, 1, 4, 0, 0, 0, 114, 101, 115, 51, 0, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 51, 10, 0, 1, 0, 0, 7, 10, 0, 1, 0, 0, 8, 10, 0, 1, 0, 0, 8, 6, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 50, 13, 2, 0, 0, 0, 37, 115, 10, 2, 0, 0, 0, 3, 5, 0, 0, 0, 76, 79, 71, 80, 72, 10, 0, 0, 0, 0, 1, 1, 0, 0, 0, 105, 0, 1, 0, 0, 0, 105, 10, 4, 0, 0, 0, 16, 17, 191, 0, 0, 0, 10, 6, 0, 0, 0, 0, 1, 0, 0, 0, 105, 8, 0, 4, 0, 0, 0, 114, 101, 115, 50, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 1, 4, 0, 0, 0, 116, 101, 109, 112, 10, 63, 0, 0, 0, 0, 4, 0, 0, 0, 116, 101, 109, 112, 10, 2, 0, 0, 0, 3, 4, 0, 0, 0, 98, 97, 110, 100, 10, 1, 0, 0, 0, 6, 1, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 3, 0, 0, 0, 98, 54, 52, 10, 3, 0, 0, 0, 3, 9, 0, 0, 0, 115, 116, 114, 105, 110, 103, 115, 117, 98, 1, 1, 0, 0, 0, 115, 0, 1, 0, 0, 0, 115, 10, 1, 0, 0, 0, 3, 7, 0, 0, 0, 112, 117, 116, 66, 121, 116, 101, 0, 1, 0, 0, 0, 105, 10, 1, 0, 0, 0, 6, 1, 1, 0, 0, 0, 105, 10, 0, 0, 0, 0, 17, 48, 255, 255, 255, 0, 1, 0, 0, 0, 120, 10, 204, 99, 0, 0, 7, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 50, 10, 0, 1, 0, 0, 8, 1, 4, 0, 0, 0, 114, 101, 115, 50, 10, 8, 0, 0, 0, 0, 4, 0, 0, 0, 114, 101, 115, 51, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 0, 4, 0, 0, 0, 114, 101, 115, 50, 6, 1, 4, 0, 0, 0, 114, 101, 115, 50, 0, 4, 0, 0, 0, 114, 101, 115, 50, 13, 2, 0, 0, 0, 37, 115, 10, 2, 0, 0, 0, 3, 5, 0, 0, 0, 76, 79, 71, 80, 72, 10, 0, 0, 0, 0, 1, 1, 0, 0, 0, 105, 0, 1, 0, 0, 0, 105, 10, 4, 0, 0, 0, 16, 17, 191, 0, 0, 0, 10, 6, 0, 0, 0, 0, 1, 0, 0, 0, 105, 8, 0, 4, 0, 0, 0, 114, 101, 115, 50, 10, 2, 0, 0, 0, 3, 6, 0, 0, 0, 114, 115, 104, 105, 102, 116, 1, 4, 0, 0, 0, 116, 101, 109, 112, 10, 63, 0, 0, 0, 0, 4, 0, 0, 0, 116, 101, 109, 112, 10, 2, 0, 0, 0, 3, 4, 0, 0, 0, 98, 97, 110, 100, 10, 1, 0, 0, 0, 6, 1, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 4, 0, 0, 0, 116, 101, 109, 112, 0, 3, 0, 0, 0, 98, 54, 52, 10, 3, 0, 0, 0, 3, 9, 0, 0, 0, 115, 116, 114, 105, 110, 103, 115, 117, 98, 1, 1, 0, 0, 0, 115, 0, 1, 0, 0, 0, 115, 10, 1, 0, 0, 0, 3, 7, 0, 0, 0, 112, 117, 116, 66, 121, 116, 101, 0, 1, 0, 0, 0, 105, 10, 1, 0, 0, 0, 6, 1, 1, 0, 0, 0, 105, 10, 0, 0, 0, 0, 17, 48, 255, 255, 255, 10, 0, 0, 0, 0, 3, 9, 0, 0, 0, 103, 101, 116, 70, 105, 110, 105, 115, 104, 1, 8, 0, 0, 0, 105, 115, 70, 105, 110, 105, 115, 104, 10, 0, 0, 0, 0, 17, 102, 248, 255, 255]
emu = Emulator(code)
emu.run()
print enc
print plain